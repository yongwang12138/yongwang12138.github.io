<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>压缩命令</title>
      <link href="/linux/compress/"/>
      <url>/linux/compress/</url>
      
        <content type="html"><![CDATA[<p>在Linux操作系统中默认自带两个原始的压缩工具分别是 <code>gzip</code>和<code>bzip2</code>, 但是它们都有先天的缺陷, 不能打包压缩文件, 每个文件都会生成一个单独的压缩包, 并且压缩之后不会保留原文件。</p><p>Linux中自带一个打包工具<code>tar</code>, 默认情况下该工具是不能进行压缩操作。</p><p>我们在使用tar进行压缩和解压缩的时候, 只需要指定相对用的参数, 在其内部就会调用对应的压缩工具gzip或者bzip2完成指定的操作。</p><h1 id="1-压缩-tar-gz-tar-bz2-tgz"><a href="#1-压缩-tar-gz-tar-bz2-tgz" class="headerlink" title="1. 压缩 (.tar.gz .tar.bz2 .tgz)"></a>1. 压缩 (.tar.gz .tar.bz2 .tgz)</h1><p>如果使用<code>tar</code>完成文件压缩, 涉及的参数如下, 在使用过程中参数没有先后顺序:</p><ul><li><p>c: 创建压缩文件</p></li><li><p>z: 使用gzip的方式进行文件压缩</p></li><li><p>j: 使用bzip2的方式进行文件压缩</p></li><li><p>v: 压缩过程中显示压缩信息, 可以省略不写</p></li><li><p>f: 指定压缩包的名字</p></li></ul><p>一般认为 .tgz 文件就等同于 .tar.gz 文件, 因此它们的压缩方式是相同的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法:</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar 参数 生成的压缩包的名字 要压缩的文件(文件或者目录)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备注: 关于生成的压缩包的名字, 建议使用标准后缀, 方便识别:</span></span><br><span class="line">- 压缩使用 gzip 方式,  标准后缀格式为: .tar.gz</span><br><span class="line">- 压缩使用 bzip2 方式, 标准后缀格式为: .tar.bz2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar czvf all.tar.gz *</span><br><span class="line">tar jzvf all.tar.bz2 *</span><br></pre></td></tr></table></figure><h1 id="2-解压缩-tar-gz-tar-bz2-tgz"><a href="#2-解压缩-tar-gz-tar-bz2-tgz" class="headerlink" title="2. 解压缩 (.tar.gz .tar.bz2 .tgz)"></a>2. 解压缩 (.tar.gz .tar.bz2 .tgz)</h1><p>如果使用<code>tar</code>进行文件的解压缩, 涉及的参数如下, 在使用过程中参数没有先后顺序:</p><ul><li><p>x: 释放压缩文件内容</p></li><li><p>z: 使用<code>gzip</code>的方式进行文件压缩, 压缩包后缀为<code>.tar.gz</code></p></li><li><p>j: 使用<code>bzip2</code>的方式进行文件压缩, 压缩包后缀为<code>.tar.bz2</code></p></li><li><p>v: 解压缩过程中显示解压缩信息</p></li><li><p>f: 指定压缩包的名字</p></li></ul><p>使用以上参数是将压缩包解压到当前目录, 如果需要解压到指定目录, 需要指定参数 -C。 一般认为 .tgz 文件就等同于 .tar.gz 文件, 解压缩方式是相同的。解压的语法格式如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法1: 解压到当前目录中</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar 参数 压缩包名</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法2: 解压到指定目录中</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar 参数 压缩包名 -C 解压目录</span></span><br></pre></td></tr></table></figure><h2 id="2-1-解压到当前目录中"><a href="#2-1-解压到当前目录中" class="headerlink" title="2.1 解压到当前目录中"></a>2.1 解压到当前目录中</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf all.tar.gz</span><br><span class="line">tar xjvf all.tar.bz2</span><br></pre></td></tr></table></figure><h2 id="2-2-解压到指定目录中"><a href="#2-2-解压到指定目录中" class="headerlink" title="2.2 解压到指定目录中"></a>2.2 解压到指定目录中</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf all.tar.gz -C test</span><br><span class="line">tar xjvf all.tar.bz2 -C test</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc</title>
      <link href="/linux/glibc/"/>
      <url>/linux/glibc/</url>
      
        <content type="html"><![CDATA[<p>glibc （GNU C Library）是 GNU 项目开发的C标准库，为 Linux 系统提供核心API支持，几乎所有应用程序都会直接或间接依赖它。 ‌</p><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><p>提供字符串处理、文件操作、内存管理、多线程支持、网络编程等基础功能，并封装Linux系统调用接口。 ‌</p><h1 id="1-查看glibc的版本"><a href="#1-查看glibc的版本" class="headerlink" title="1. 查看glibc的版本"></a>1. 查看glibc的版本</h1><p><code>ldd --version</code></p><p><code>ldd</code>工具是‌<strong>GLIBC库的一部分</strong>‌</p><h1 id="2-GLIBC和GCC的区别"><a href="#2-GLIBC和GCC的区别" class="headerlink" title="2. GLIBC和GCC的区别"></a>2. GLIBC和GCC的区别</h1><p>‌二者是Linux系统中两个独立的核心组件：</p><ul><li>‌<strong>GLIBC（GNU C Library）</strong>‌<br>是C语言的标准库实现，提供系统调用封装（如文件操作、内存管理）、基础函数（如<code>printf()</code>）及POSIX API等运行时支持。<br>‌<strong>定位</strong>‌：应用程序运行的底层库依赖。</li><li>‌<strong>GCC（GNU Compiler Collection）</strong>‌<br>是编译器工具链，负责将C&#x2F;C++等语言的源代码编译为可执行文件811。<br>‌<strong>定位</strong>‌：代码编译阶段的核心工具。</li></ul><h4 id="二者关系："><a href="#二者关系：" class="headerlink" title="二者关系："></a>二者关系：</h4><ol><li>‌<strong>协作关系</strong>‌<br>GCC在编译代码时依赖GLIBC的头文件（*.h）定义函数接口；生成的可执行文件在运行时则需要GLIBC的动态库（如<code>libc.so.6</code>）提供具体实现。</li><li>‌<strong>版本兼容性</strong>‌<br>高版本GCC可能依赖新GLIBC的特性，导致其编译的程序无法在低GLIBC系统运行（如您最初遇到的报错）。</li><li>‌<strong>功能分离</strong>‌<br>GCC仅负责生成二进制文件，不包含运行时函数实现；GLIBC不参与编译，仅支撑程序运行。</li></ol><h4 id="总结对比："><a href="#总结对比：" class="headerlink" title="总结对比："></a>总结对比：</h4><table><thead><tr><th>‌<strong>组件</strong>‌</th><th>‌<strong>核心职责</strong>‌</th><th>‌<strong>用户场景</strong>‌</th><th>‌<strong>依赖关系</strong>‌</th></tr></thead><tbody><tr><td>GCC</td><td>源代码编译</td><td>开发阶段</td><td>编译时需GLIBC头文件</td></tr><tr><td>GLIBC</td><td>提供运行时函数实现</td><td>程序执行阶段</td><td>运行时需GLIBC动态库</td></tr></tbody></table><blockquote><p>⚠️ 提示：若遇到GLIBC版本不兼容问题（如旧系统运行新GCC编译的程序），可通过静态链接、容器化或升级GLIBC解决。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang基础</title>
      <link href="/golang/go-base/"/>
      <url>/golang/go-base/</url>
      
        <content type="html"><![CDATA[<h1 id="1-打印函数"><a href="#1-打印函数" class="headerlink" title="1. 打印函数"></a>1. 打印函数</h1><h2 id="1-1-Print-和-Println-区别："><a href="#1-1-Print-和-Println-区别：" class="headerlink" title="1.1 Print 和 Println 区别："></a>1.1 Print 和 Println 区别：</h2><p>Println 会自动换行，Print 不会</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello Golang&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello Golang&quot;</span>)</span><br><span class="line">fmt.Print(<span class="string">&quot;Hello Golang&quot;</span>)</span><br><span class="line">fmt.Print(<span class="string">&quot;Hello Golang&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/golang/go-base/image-20250629202015636.png" alt="image-20250629202015636"></p><p>一次输入多个值的时候 Println 中间有空格 Print 没有</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">fmt.Print(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/golang/go-base/image-20250629204412777.png" alt="image-20250629204412777"></p><h2 id="1-2-Printf"><a href="#1-2-Printf" class="headerlink" title="1.2 Printf"></a>1.2 Printf</h2><p>Printf 是格式化输出，且不会自动换行</p><p><strong>“%T”为输出数据类型</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span> = <span class="number">3</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a=&quot;</span>, a, <span class="string">&quot;b=&quot;</span>, b, <span class="string">&quot;c=&quot;</span>, c)</span><br><span class="line">fmt.Println(<span class="string">&quot;a=&quot;</span>, a, <span class="string">&quot;b=&quot;</span>, b, <span class="string">&quot;c=&quot;</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%v b=%v c=%v\n&quot;</span>, a, b, c)</span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%v b=%v c=%v&quot;</span>, a, b, c)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%v a的类型为=%T&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/golang/go-base/image-20250707230948494.png" alt="image-20250707230948494"></p><h1 id="2-常见的变量定义方法"><a href="#2-常见的变量定义方法" class="headerlink" title="2. 常见的变量定义方法"></a>2. 常见的变量定义方法</h1><h2 id="2-1-var定义变量"><a href="#2-1-var定义变量" class="headerlink" title="2.1. var定义变量"></a>2.1. var定义变量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-类型推导方式定义变量"><a href="#2-2-类型推导方式定义变量" class="headerlink" title="2.2 类型推导方式定义变量"></a>2.2 类型推导方式定义变量</h2><p><strong>注意：</strong>短变量只能用于声明局部变量，不能用于全局变量的声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名 := 表达式</span><br><span class="line">n := <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="2-3-一次定义多个变量"><a href="#2-3-一次定义多个变量" class="headerlink" title="2.3 一次定义多个变量"></a>2.3 一次定义多个变量</h2><h3 id="2-3-1-普通定义"><a href="#2-3-1-普通定义" class="headerlink" title="2.3.1 普通定义"></a>2.3.1 普通定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a <span class="type">string</span></span><br><span class="line">b <span class="type">int</span></span><br><span class="line">c <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line">a = <span class="string">&quot;张三&quot;</span> </span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="literal">true</span></span><br><span class="line">fmt.Println(a,b,c)</span><br></pre></td></tr></table></figure><h3 id="2-3-2-短变量声明法"><a href="#2-3-2-短变量声明法" class="headerlink" title="2.3.2 短变量声明法"></a>2.3.2 短变量声明法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c := <span class="string">&quot;张三&quot;</span>, <span class="number">10</span>, <span class="literal">true</span></span><br><span class="line">fmt.Println(a,b,c)</span><br><span class="line">fmt.Printf(<span class="string">&quot;类型:%T&quot;</span>, a)</span><br></pre></td></tr></table></figure><h3 id="2-3-3-匿名变量"><a href="#2-3-3-匿名变量" class="headerlink" title="2.3.3 匿名变量"></a>2.3.3 匿名变量</h3><p>在使用多重赋值时，如果想要忽略某个值，可以使用<strong>匿名变量</strong>（anonymous variable）。 匿名变量用一个下划线”_”表示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getInfo</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>, <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, username := getInfo()</span><br><span class="line">fmt.Println(username)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-常量"><a href="#3-常量" class="headerlink" title="3. 常量"></a>3. 常量</h1><h2 id="3-1-使用-const-定义常量"><a href="#3-1-使用-const-定义常量" class="headerlink" title="3.1 使用 const 定义常量"></a>3.1 使用 const 定义常量</h2><p>多个常量可以一起声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.1415</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">n1 = <span class="number">100</span></span><br><span class="line">n2</span><br><span class="line">n3</span><br><span class="line">)</span><br><span class="line">fmt.Println(pi);</span><br><span class="line">fmt.Println(n1);</span><br><span class="line">fmt.Println(n2);</span><br><span class="line">fmt.Println(n3);</span><br></pre></td></tr></table></figure><h2 id="3-2-const常量结合iota-的使用"><a href="#3-2-const常量结合iota-的使用" class="headerlink" title="3.2 const常量结合iota 的使用"></a>3.2 const常量结合iota 的使用</h2><p>iota 是 golang 语言的常量计数器,只能在常量的表达式中使用。</p><p>iota 在 const 关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量</p><p>声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">n1  = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">n2         <span class="comment">//1</span></span><br><span class="line">_</span><br><span class="line">n4        <span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">n1  = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">n2         <span class="comment">//1</span></span><br><span class="line">_</span><br><span class="line">n3 = <span class="number">300</span> <span class="comment">//300</span></span><br><span class="line">n4 = <span class="literal">iota</span> <span class="comment">//4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你省略后续行的表达式时，它们会复用第一行的表达式结构，同时 iota 的值逐行递增。</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a, b = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">10</span> <span class="comment">//1,11</span></span><br><span class="line">_, _</span><br><span class="line">c, d <span class="comment">//3,12</span></span><br><span class="line">e, f <span class="comment">//4,13</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="4-格式化文档"><a href="#4-格式化文档" class="headerlink" title="4. 格式化文档"></a>4. 格式化文档</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> fmt main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h1 id="5-基本数据类型"><a href="#5-基本数据类型" class="headerlink" title="5. 基本数据类型"></a>5. 基本数据类型</h1><h2 id="5-1-unsafe-Sizeof"><a href="#5-1-unsafe-Sizeof" class="headerlink" title="5.1 unsafe.Sizeof"></a>5.1 unsafe.Sizeof</h2><p>unsafe.Sizeof(n1)是unsafe包的一个函数，可以返回n1变量占用的字节数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int8</span> = <span class="number">120</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, a)</span><br><span class="line">fmt.Println(unsafe.Sizeof(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-int不同长度直接的转换"><a href="#5-2-int不同长度直接的转换" class="headerlink" title="5.2 int不同长度直接的转换"></a>5.2 int不同长度直接的转换</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num1 <span class="type">int8</span></span><br><span class="line">num1 = <span class="number">127</span></span><br><span class="line">num2 := <span class="type">int32</span>(num1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;值:%v 类型%T&quot;</span>, num2, num2) <span class="comment">//值:127 类型 int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-数字字面量语法"><a href="#5-3-数字字面量语法" class="headerlink" title="5.3 数字字面量语法"></a>5.3 数字字面量语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d \n&quot;</span>, a) <span class="comment">// 10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%b \n&quot;</span>, a) <span class="comment">// 1010 占位符%b 表示二进制</span></span><br><span class="line"><span class="comment">// 八进制 以 0 开头</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span></span><br><span class="line">b = <span class="number">077</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%o \n&quot;</span>, b) <span class="comment">// 77</span></span><br><span class="line"><span class="comment">// 十六进制 以 0x 开头</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">c = <span class="number">0xff</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%x \n&quot;</span>, c) <span class="comment">// ff</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%X \n&quot;</span>, c) <span class="comment">// FF</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d \n&quot;</span>, c) <span class="comment">// 255</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-布尔值"><a href="#5-4-布尔值" class="headerlink" title="5.4 布尔值"></a>5.4 布尔值</h2><p>Go 语言中以 bool 类型进行声明布尔型数据，布尔型数据只有 true（真）和 false（假）两个值。</p><p><strong>注意：</strong></p><ul><li>布尔类型变量的默认值为 false。</li><li>Go 语言中不允许将整型强制转换为布尔型. </li><li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span></span><br><span class="line">fmt.Println(b, <span class="string">&quot;占用字节：&quot;</span>, unsafe.Sizeof(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PS C:\Users\Administrator\Desktop\demo01&gt; <span class="keyword">go</span> run main.<span class="keyword">go</span></span><br><span class="line"><span class="literal">true</span> 占用字节： <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6. 字符串"></a>6. 字符串</h1><h2 id="6-1-多行字符串"><a href="#6-1-多行字符串" class="headerlink" title="6.1 多行字符串"></a>6.1 多行字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">`this is str</span></span><br><span class="line"><span class="string">this is str</span></span><br><span class="line"><span class="string">this is str`</span></span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/golang/go-base/image-20250708220040814.png" alt="image-20250708220040814"></p><h2 id="6-2-字符串长度"><a href="#6-2-字符串长度" class="headerlink" title="6.2 字符串长度"></a>6.2 字符串长度</h2><p><code>len(str)</code></p><h2 id="6-3-拼接字符串"><a href="#6-3-拼接字符串" class="headerlink" title="6.3 拼接字符串"></a>6.3 拼接字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;golang&quot;</span></span><br><span class="line">fmt.Println(str1 + str2)</span><br><span class="line"><span class="keyword">var</span> str3 = fmt.Sprintf(<span class="string">&quot;%v %v&quot;</span>, str1, str2)</span><br><span class="line">fmt.Println(str3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-分割字符串"><a href="#6-4-分割字符串" class="headerlink" title="6.4 分割字符串"></a>6.4 分割字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123-456-789&quot;</span></span><br><span class="line"><span class="keyword">var</span> arr = strings.Split(str, <span class="string">&quot;-&quot;</span>)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\demo01&gt; go run .\main.go</span><br><span class="line">[123 456 789]</span><br></pre></td></tr></table></figure><h2 id="6-5-join-操作"><a href="#6-5-join-操作" class="headerlink" title="6.5 join 操作"></a>6.5 join 操作</h2><p>把切片链接成字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123-456-789&quot;</span></span><br><span class="line"><span class="keyword">var</span> arr = strings.Split(str, <span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> str2 = strings.Join(arr, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">fmt.Println(str2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop\demo01&gt; go run .\main.go</span><br><span class="line">123*456*789</span><br></pre></td></tr></table></figure><h2 id="6-6-判断是否包含"><a href="#6-6-判断是否包含" class="headerlink" title="6.6 判断是否包含"></a>6.6 判断是否包含</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;this is golang&quot;</span></span><br><span class="line"><span class="keyword">var</span> flag = strings.Contains(str, <span class="string">&quot;golang&quot;</span>)</span><br><span class="line">fmt.Println(flag) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7-前缀-后缀判断"><a href="#6-7-前缀-后缀判断" class="headerlink" title="6.7 前缀&#x2F;后缀判断"></a>6.7 前缀&#x2F;后缀判断</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;this is golang&quot;</span></span><br><span class="line"><span class="keyword">var</span> flag = strings.HasPrefix(str, <span class="string">&quot;this&quot;</span>)</span><br><span class="line">fmt.Println(flag) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">flag = strings.HasSuffix(str, <span class="string">&quot;golang&quot;</span>)</span><br><span class="line">fmt.Println(flag) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-8-子串出现的位置"><a href="#6-8-子串出现的位置" class="headerlink" title="6.8 子串出现的位置"></a>6.8 子串出现的位置</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;this is golang&quot;</span></span><br><span class="line"><span class="keyword">var</span> index1 = strings.Index(str, <span class="string">&quot;is&quot;</span>)</span><br><span class="line">fmt.Println(index1) <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index2 = strings.LastIndex(str, <span class="string">&quot;is&quot;</span>)</span><br><span class="line">fmt.Println(index2) <span class="comment">//5</span></span><br><span class="line"><span class="keyword">var</span> index3 = strings.LastIndex(str, <span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">fmt.Println(index3) <span class="comment">//-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang环境配置</title>
      <link href="/golang/go-config/"/>
      <url>/golang/go-config/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h1><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><p><img src="/golang/go-config/image-20250629192416705.png" alt="image-20250629192416705"></p><h1 id="2-查看版本"><a href="#2-查看版本" class="headerlink" title="2. 查看版本"></a>2. 查看版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p><img src="/golang/go-config/image-20250629193456131.png" alt="image-20250629193456131"></p><h1 id="3-查看GO环境"><a href="#3-查看GO环境" class="headerlink" title="3. 查看GO环境"></a>3. 查看GO环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure><p><img src="/golang/go-config/image-20250629193757400.png" alt="image-20250629193757400"></p><p><strong>说明</strong>：Go1.11版本之后无需手动配置环境变量，使用gomod管理项目，也不需要非得把项目放到GOPATH指定目录下，可以在磁盘的任何位置新建一个项目。</p><p>Go1.13以后可以彻底不需要GOPATH了。</p><h2 id="4-安装插件"><a href="#4-安装插件" class="headerlink" title="4. 安装插件"></a>4. 安装插件</h2><p><img src="/golang/go-config/image-20250629194440417.png" alt="image-20250629194440417"></p><h1 id="5-Hello-Golang"><a href="#5-Hello-Golang" class="headerlink" title="5. Hello Golang"></a>5. Hello Golang</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello Golang&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line"></span><br><span class="line">go build .\main.go</span><br><span class="line">.\main.exe</span><br></pre></td></tr></table></figure><p><img src="/golang/go-config/image-20250629195552884.png" alt="image-20250629195552884"></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion安装及配置</title>
      <link href="/cplusplus/clion-install/"/>
      <url>/cplusplus/clion-install/</url>
      
        <content type="html"><![CDATA[<h1 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1. 官网下载"></a>1. 官网下载</h1><p><a href="https://www.jetbrains.com.cn/">JetBrains: 软件开发者和团队的必备工具</a></p><p><img src="/cplusplus/clion-install/image-20250527102130389.png" alt="image-20250527102130389"></p><h1 id="2-配置Qt环境"><a href="#2-配置Qt环境" class="headerlink" title="2. 配置Qt环境"></a>2. 配置Qt环境</h1><p><img src="/cplusplus/clion-install/image-20250527135227595.png" alt="image-20250527135227595"></p><div class="note blue flat"><p>说明: debug和release只需要配置一个即可。</p></div><p><img src="/cplusplus/clion-install/image-20250527135429419.png" alt="image-20250527135429419"></p><p><img src="/cplusplus/clion-install/image-20250527135947060.png" alt="image-20250527135947060"></p><p><img src="/cplusplus/clion-install/image-20250527140552673.png" alt="image-20250527140552673"></p><p>实参：<code>$FileName$ -o ui_$FileNameWithoutAllExtensions$.h</code></p><p><img src="/cplusplus/clion-install/image-20250527140842097.png" alt="image-20250527140842097"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诡异的BUG</title>
      <link href="/other/strange-question/"/>
      <url>/other/strange-question/</url>
      
        <content type="html"><![CDATA[<h1 id="1-库编译不过"><a href="#1-库编译不过" class="headerlink" title="1. 库编译不过"></a>1. 库编译不过</h1><p>检查库是32位还是64位，是否与编译一致。</p><h1 id="2-Debug不崩溃，Release崩溃"><a href="#2-Debug不崩溃，Release崩溃" class="headerlink" title="2. Debug不崩溃，Release崩溃"></a>2. Debug不崩溃，Release崩溃</h1><p>有函数没有返回值。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark教程</title>
      <link href="/other/wireshark/"/>
      <url>/other/wireshark/</url>
      
        <content type="html"><![CDATA[<p><img src="/other/wireshark/47b7011d-872d-4947-8e57-b32b7a24089b.jpg" alt="47b7011d-872d-4947-8e57-b32b7a24089b"></p><p><img src="/other/wireshark/image-20250415161900037.png" alt="image-20250415161900037"></p><p>抓包界面显示的结果和协议栈的层次关系正好相反，最上面的是物理层，最下面是应用层。具体的对应关系如下：</p><blockquote><ol><li>Frame: 物理层的数据帧概况</li><li>Ethernet II: 数据链路层以太网帧头部信息</li><li>Internet Protocol Version 4: 互联网层IP包头部信息</li><li>Transmission Control Protocol: 传输层的数据段头部信息，此处是TCP</li><li>Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</li></ol></blockquote><h1 id="1-TCP基础"><a href="#1-TCP基础" class="headerlink" title="1.TCP基础"></a>1.TCP基础</h1><h2 id="📚基础理论"><a href="#📚基础理论" class="headerlink" title="📚基础理论"></a>📚基础理论</h2><h3 id="📐传输控制协议"><a href="#📐传输控制协议" class="headerlink" title="📐传输控制协议"></a>📐传输控制协议</h3><blockquote><p> 传输控制协议（<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，在 OSI 模型中完成传输层指定功能。 TCP 使用<strong>校验和函数</strong>检验数据是否出现错误，在数据发送和接收时均需要计算<strong>校验和</strong>。</p></blockquote><h4 id="✒️TCP-特点"><a href="#✒️TCP-特点" class="headerlink" title="✒️TCP 特点"></a>✒️TCP 特点</h4><p><strong>1.TCP 是面向连接的传输层协议</strong></p><blockquote><p> 应用程序在使用 TCP 协议前，必须首先完成 TCP 连接的建立。在数据传输结束后，必须释放先前已建立的 TCP 连接</p></blockquote><p><strong>2.每一条 TCP 连接只能有两个端点</strong></p><blockquote><p> TCP 连接只能是点对点，一对一的</p></blockquote><p><strong>3.TCP 提供可靠交付服务</strong></p><blockquote><p> 通过 TCP 连接传送的数据，无差错、不丢失、不重复，且按序到达</p></blockquote><p><strong>4.TCP 提供全双工通信</strong></p><blockquote><p> TCP 允许通信双方的应用进程在<strong>任何时候</strong>都可以发送数据，TCP连接的两端都设有<strong>发送、接收缓存</strong>，用于临时存放双向通信的数据，上层应用进程在时机恰当时会读取缓存中的数据</p></blockquote><p><strong>5.TCP 面向字节流</strong></p><blockquote><p> <strong>流</strong>是指：流入到进程或从进程流出的<strong>字节序列</strong> TCP 把应用程序回传的数据看做一连串的<strong>无结构</strong>的字节流，不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系 接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一致，且接收方的应用程序必须具有识别接收字节流，并将其还原为有意义的应用层数据的能力</p></blockquote><p><img src="/other/wireshark/869e370d-b641-434d-b4e7-ac55c604b5cd.jpg" alt="869e370d-b641-434d-b4e7-ac55c604b5cd"></p><h4 id="✒️TCP-报文首部"><a href="#✒️TCP-报文首部" class="headerlink" title="✒️TCP 报文首部"></a>✒️TCP 报文首部</h4><p>这里需要了解 TCP 报文首部的格式，相关<strong>控制位</strong>非常重要</p><blockquote><p> 由于 TCP 报文段首部的前 20 个字节是固定的，其后 4n 个字节是根据需要增加的选项，所以 TCP首部的最小长度是 20 字节</p></blockquote><p><strong>1.源端口和目的端口</strong></p><blockquote><p> 各占 2 字节，分别写入源端口号、目的端口号</p></blockquote><p><strong>2.序号字段</strong></p><blockquote><p> 占 4 字节，范围为 <code>[0,2 ^ 32-1]</code>，序号使用 <code>mod2^32</code> 运算，在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置，首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号</p></blockquote><p><strong>3.确认号字段</strong></p><blockquote><p> 占4字节，是期望收到对方下一个报文段的第一个数据字节的序号。若确认号等于 N，则表明：到序号 N-1 为止数据均己正确接收</p></blockquote><p><strong>4.数据偏移字段</strong></p><blockquote><p> 占 4 位，指出 TCP 报文段的数据起始处和 TCP 报文段的起始处的距离。此字段实际上指出了 TCP 报文段的首部长度 </p></blockquote><p><strong>5.保留字段</strong></p><blockquote><p> 占 6 位，保留为今后使用，目前应置为0 </p></blockquote><p><strong>6.紧急 URG</strong></p><blockquote><p> URG&#x3D;1时，表明紧急指针字段有效，它告诉系统此报文段中有紧急数据，应尽快传送，即提高数据传送的优先级 </p></blockquote><p><strong>7.确认 ACK</strong></p><blockquote><p> 仅当 ACK&#x3D;1 时确认号字段才有效，TCP 规定，在连接建立后所有传送的报文段必须将 ACK 置为 1 </p></blockquote><p><strong>8.推送 PSH</strong></p><blockquote><p> 接收 TCP 收到 PSH&#x3D;1 的报文段后，将尽快交付接收的应用进程，不再等到缓存都填满后再继续向上交付 </p></blockquote><p><strong>9.复位 RST</strong></p><blockquote><p> 当 RST&#x3D;1 时，表明 TCP 连接中出现严重差错，必须释放连接，然后再重新建立传输连接。也可以用于拒绝一个非法的报文段或拒绝打开一个连接 </p></blockquote><p><strong>10.同步 SYN</strong></p><blockquote><p> 连接建立时用来同步序号，SYN&#x3D;1就表示这是一个连接请求或连接接受报文 </p></blockquote><p><strong>11.终止 FIN</strong></p><blockquote><p> 用于释放一个连接，当 FIN&#x3D;1 时，表明此报文段的发送方的数据己发送完毕，并要求释放传输连接 </p></blockquote><p><strong>12.窗口字段</strong></p><blockquote><p> 占 2 字节，窗口值范围为 <code>[0，2^16-1]</code> 之间的整数。窗口是指发送本报文段的一方的接收窗口，窗口值作为接收方让发送方设置其发送窗口的依据 </p></blockquote><p><strong>13.检验和字段</strong></p><blockquote><p> 占 2 字，检验和字段检验的范围包括首部和数据两部分 </p></blockquote><p><strong>14.紧急指针</strong></p><blockquote><p> 占 2 字节，仅当 URG&#x3D;1 时才有意义，含义是：本报文段中的紧急数据的字数，紧急指针指出了紧急数据的末尾在报文段中的位置 当所有紧急数据都处理完时，TCP就告诉应用程序恢复到正常操作。注意：即使窗口为零时也可发送紧急数据 </p></blockquote><p><strong>15.选项字段</strong></p><blockquote><p> 长度可变，最长可达 40 字节。未使用“选项”时，TCP 首部长度为 20 字节</p></blockquote><h2 id="📚TCP-连接的建立与释放"><a href="#📚TCP-连接的建立与释放" class="headerlink" title="📚TCP 连接的建立与释放"></a>📚TCP 连接的建立与释放</h2><h3 id="📐三次握手"><a href="#📐三次握手" class="headerlink" title="📐三次握手"></a>📐三次握手</h3><p><code>TCP</code> 建立连接的过程称为<strong>握手</strong>，握手需要在客户端和<a href="https://cloud.tencent.com/product/cvm/?from_column=20065&from=20065">服务器</a>之间交换三个 <code>TCP</code> 报文段</p><p><code>TCP</code> 三次握手的作用就是使客户端和服务端双方都明确自己的责任，<strong>保证双方都具有资源接收和发送的能力</strong></p><p><img src="/other/wireshark/959c21fa3f01a32ce70e65146b2dfadc.gif" alt="959c21fa3f01a32ce70e65146b2dfadc"></p><p><img src="/other/wireshark/a4597aca64a994dc6995ad23a8b91f35.png" alt="a4597aca64a994dc6995ad23a8b91f35"></p><p>字符释意：</p><ul><li><code>ACK</code>：确认报文段</li><li><code>ack</code>：确认号</li><li><code>SYN</code>：发送连接请求 &#x2F; 接收报文段&#96;</li><li><code>seq</code>：发送数据的第一个字节的序号</li></ul><p>客户端与服务端资源收发的<strong>三次握手</strong>过程如下：</p><p>*注：图例中的 <code>Ss</code>、<code>Sa</code> 分别表示 <code>Server send</code>、<code>Server accept</code>（服务端发送能力、服务端接收能力）；<code>Cs</code>、<code>Ca</code> 分别表示 <code>Client send</code>、<code>Client accept</code>（客户端发送能力、客户端接收能力）</p><p><strong>1.第一次握手</strong></p><blockquote><p> 第一次握手由客户端发送资源包给到服务端，若该过程正常，则得出结论：<strong>服务端接收、客户端发送服务正常</strong> </p></blockquote><table><thead><tr><th align="left">TCP 建立连接第一次握手示意图</th></tr></thead></table><p><img src="/other/wireshark/72208c86d2baeb2f92490c6785481d76.jpeg" alt="img"></p><p><strong>2.第二次握手</strong></p><blockquote><p> 第二次握手由服务端发送资源包给到客户端，若该过程正常，则得出结论：<strong>服务端发送、客户端接收服务正常</strong> </p></blockquote><table><thead><tr><th align="left">TCP 建立连接第二次握手示意图</th></tr></thead></table><p><img src="/other/wireshark/d1322aca45c72e0c8ee265f7bfdedd61.jpeg" alt="img"></p><p><strong>3.第三次握手</strong></p><blockquote><p> 第三次握手由客户端发送资源包给到服务端，若该过程正常，则得出结论：<strong>服务端接收、客户端发送服务正常</strong> </p></blockquote><table><thead><tr><th align="left">TCP 建立连接第三次握手示意图</th></tr></thead></table><p><img src="/other/wireshark/5eaba113be3874cc097e1dd46958a24f.jpeg" alt="img"></p><p>通过这三次的握手过程我们可以分析得到：第二次是对第一次握手的补充，第三次是对第二次握手的补充，最终正好形成闭环，客户端和服务端都确认了自己的接收、发送能力正常，之后方可进行通信</p><p>并且，要完成两者状态的监测，这之间<strong>至少</strong>需要三次过程，两次并不足以判断自身的服务状态。每一个步骤都相互关联，下一次握手的“响应”由上一次“请求“触发，每次握手得出的结论都是对上一次结果的补充，从而得出最终结果</p><p>三次握手过程中，客户端和服务端交换 <strong>I</strong>nitial <strong>S</strong>equence <strong>N</strong>umber (<code>ISN</code>)，为了使对方清除下一步接收到的数据信息应以何<strong>序列号</strong>进行数据整合</p><p>并且，ISN 在此过程中是动态生成的。假如 ISN 固定不变，入侵者非常容易就能得出后续数据的确认号，这将会危机到数据信息的安全</p><h3 id="📐四次挥手"><a href="#📐四次挥手" class="headerlink" title="📐四次挥手"></a>📐四次挥手</h3><p>当成功建立一个 <code>TCP</code> 连接， 服务端在 <code>LISTEN</code> 状态下，收到建立连接请求的 <code>SYN</code> 报文后，将 <code>ACK</code>和 <code>SYN</code> 存放到同一个报文中一起发送给客户端</p><p>而关闭连接时，服务端收到客户端的 <code>FIN</code> 报文时，仅表示对方不再发送数据，但仍然能够接收数据。此时，服务端不一定将全部数据都发送给了客户端</p><p>因此服务端关闭有两种方式：</p><ol><li>立即关闭</li><li>继续发送一些数据给客户端后，再发送 <code>FIN</code> 报文给客户端（表示同意关闭连接），是否立刻关闭发送数据通道，需交由上层应用决定</li></ol><p>所以，客户端的 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送，这里就会导致次数增加一</p><p>数据传输完毕后，双方均可释放连接。起初，客户端和服务端均处于 <code>ESTABLISHED</code> 状态，然后是客户端主动关闭，服务器被动关闭</p><table><thead><tr><th align="left">TCP 释放连接四次挥手示意图</th></tr></thead></table><p><img src="/other/wireshark/c41076e52f07374fbd218551b5dfd60a.png" alt="img"></p><p>字符释意：</p><ul><li><code>FIN</code> ：连接终止位</li><li><code>seq</code>：发送的第一个字节的序号</li><li><code>ACK</code>：确认报文段</li><li><code>ack</code>：确认号</li></ul><p><strong>四次挥手过程：</strong></p><ul><li>客户端发送<strong>第一次</strong>挥手，之后由 <code>ESTABLISHED</code> 状态转为 <code>FIN_WAIT1</code> 状态 </li><li>服务器收到客户端的第一次挥手之后，发送<strong>第二次挥手</strong>给服务器，服务器进入 <code>CLOSE_WAIT</code> 状态，等待服务器自身的 <code>SOCKET</code> 关闭等处理 </li><li>客户端收到服务器的第二次挥手，进入 <code>FIN_WAIT2</code> 状态，等待服务器关闭 </li><li>服务器发送<strong>第三次挥手</strong>，然后进入 <code>LAST_ACK</code> 状态 </li><li>客户端收到第三次挥手，发送<strong>第四次挥手</strong>，客户端进入 <code>TIME_WAIT</code> 状态； </li><li>服务器收到第四次挥手，进入 <code>CLOSED</code> 状态，客户端等待 2MSL 后，进入 <code>CLOSED</code> 状态</li></ul><p>TCP 状态转换过程见下图：</p><table><thead><tr><th align="left">TCP 状态转换过程示意图</th></tr></thead></table><p><img src="/other/wireshark/5ed3697f8ce88c0c70ec2e993cd500b5.png" alt="img"></p><h2 id="📚总结"><a href="#📚总结" class="headerlink" title="📚总结"></a>📚总结</h2><p><code>TCP</code> 建立连接的三次握手是指发送了三个报文段，而 <code>TCP</code> 断开连接进行四次挥手是指发送了四个报文段，在此过程中，<code>SYN</code> 和 <code>FIN</code> 均利用重传进行可靠传输</p><p>连接的释放本质上两次就可以完成，但若想要完全释放，则需要四次挥手</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯代码继承QWidget</title>
      <link href="/qt/inherit-qwidget/"/>
      <url>/qt/inherit-qwidget/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义窗口类继承QWidget不显示"><a href="#自定义窗口类继承QWidget不显示" class="headerlink" title="自定义窗口类继承QWidget不显示"></a>自定义窗口类继承QWidget不显示</h1><p><strong>主要是因为QSS样式不生效</strong></p><p>QWidget仅仅支持background，background-clip和background-origin属性（其实和不支持qss也没差多少…）。如果你继承自QWidget自定义一个窗口，那么你需要重写 paintEvent事件，当然文档里已经给你写好了，直接粘贴进去就可以了。下面列一份代码段：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CustomWidget::paintEvent</span><span class="params">(QPaintEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QStyleOption opt;</span><br><span class="line">    opt.<span class="built_in">init</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="function">QPainter <span class="title">p</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="built_in">style</span>()-&gt;<span class="built_in">drawPrimitive</span>(QStyle::PE_Widget, &amp;opt, &amp;p, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态导入库</title>
      <link href="/cplusplus/dynamic-import-lib/"/>
      <url>/cplusplus/dynamic-import-lib/</url>
      
        <content type="html"><![CDATA[<p>在 Windows 系统里链接动态库时，编译阶段链接的是动态库的导入库（<code>.lib</code> 文件），而程序运行时依赖的是具体的动态链接库（<code>.dll</code> 文件）</p><h3 id="编译阶段：链接导入库"><a href="#编译阶段：链接导入库" class="headerlink" title="编译阶段：链接导入库"></a>编译阶段：链接导入库</h3><ul><li><strong>导入库的作用</strong>：导入库是一个相对较小的文件，它主要包含了动态链接库中导出函数和变量的符号信息，如函数名、参数类型、返回值类型等。在编译和链接过程中，链接器会读取导入库中的符号信息，并将这些信息嵌入到可执行文件中。这样，可执行文件在运行时就知道要从哪个动态链接库中加载哪些函数和变量。</li><li><strong>链接方式</strong>：在 Qt 的 <code>.pro</code> 文件或者其他编译配置中，使用 <code>-l</code> 和 <code>-L</code> 选项来指定要链接的导入库。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">win32: &#123;</span><br><span class="line">    LIBS += -L$$DESTDIR/ffmpeg/lib/ # 动态库路径</span><br><span class="line">    # 动态导入库 下列都是动态导入库，不是静态库</span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/avcodec.lib&quot;</span></span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/avdevice.lib&quot;</span></span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/avfilter.lib&quot;</span></span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/avformat.lib&quot;</span></span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/avutil.lib&quot;</span></span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/postproc.lib&quot;</span></span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/swresample.lib&quot;</span></span><br><span class="line">    LIBS += <span class="string">&quot;$$PWD/ffmpeg/lib/swscale.lib&quot;</span></span><br><span class="line">#win32: LIBS += -L$$PWD/ffmpeg/lib/ -lavcodec -lavdevice -lavfilter -lavformat -lavutil -lpostproc -lswresample -lswscale</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表初始化</title>
      <link href="/cplusplus/list-init/"/>
      <url>/cplusplus/list-init/</url>
      
        <content type="html"><![CDATA[<h1 id="成员变量初始化方式分析"><a href="#成员变量初始化方式分析" class="headerlink" title="成员变量初始化方式分析"></a>成员变量初始化方式分析</h1><p><code>uint32_t mWidth &#123;0&#125;;</code> 与 <code>uint32_t mWidth = 0;</code></p><p><code>uint32_t mWidth &#123;0&#125;;</code> 这种初始化方式是可以的，它使用了 C++11 引入的统一初始化语法（也称为列表初始化），和传统的 <code>uint32_t mWidth = 0;</code> 初始化方式各有特点，下面为你详细分析：</p><h2 id="语法解释"><a href="#语法解释" class="headerlink" title="语法解释"></a>语法解释</h2><ul><li>**<code>uint32_t mWidth = 0;</code>**：这是 C++ 从 C 语言继承而来的传统初始化方式，称为拷贝初始化（copy initialization）。它会先创建一个临时对象，然后将这个临时对象的值拷贝给要初始化的变量。对于像 <code>uint32_t</code> 这种基本数据类型，编译器通常会进行优化，直接将值赋给变量，不会有额外的性能开销。</li><li>**<code>uint32_t mWidth &#123;0&#125;;</code>**：这是 C++11 引入的统一初始化语法，也叫列表初始化（list initialization）或大括号初始化（brace initialization）。使用这种方式初始化时，变量会直接被初始化为大括号内的值，避免了一些潜在的窄化转换问题。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 使用列表初始化</span></span><br><span class="line">    <span class="type">uint32_t</span> mWidth &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// 使用传统的拷贝初始化</span></span><br><span class="line">    <span class="type">uint32_t</span> mHeight = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Width: &quot;</span> &lt;&lt; obj.mWidth &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Height: &quot;</span> &lt;&lt; obj.mHeight &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两者区别和使用场景"><a href="#两者区别和使用场景" class="headerlink" title="两者区别和使用场景"></a>两者区别和使用场景</h2><h3 id="1-防止窄化转换"><a href="#1-防止窄化转换" class="headerlink" title="1. 防止窄化转换"></a>1. 防止窄化转换</h3><p>列表初始化会阻止可能导致数据丢失的窄化转换，而传统的拷贝初始化则不会。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 传统初始化，允许窄化转换</span></span><br><span class="line">    <span class="type">uint32_t</span> num1 = <span class="number">3.14</span>; </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;num1: &quot;</span> &lt;&lt; num1 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列表初始化，不允许窄化转换，编译报错</span></span><br><span class="line">    <span class="comment">// uint32_t num2 &#123;3.14&#125;; </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>uint32_t num1 = 3.14;</code> 会将 <code>3.14</code> 截断为 <code>3</code> 进行赋值；而 <code>uint32_t num2 &#123;3.14&#125;;</code> 会在编译时产生错误，因为这是一个窄化转换。</p><h3 id="2-语法一致性"><a href="#2-语法一致性" class="headerlink" title="2. 语法一致性"></a>2. 语法一致性</h3><p>列表初始化提供了一种统一的初始化语法，无论是基本数据类型、数组、结构体还是类对象，都可以使用相同的语法进行初始化。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本数据类型</span></span><br><span class="line">    <span class="type">uint32_t</span> num &#123;<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准容器</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-兼容性和习惯"><a href="#3-兼容性和习惯" class="headerlink" title="3. 兼容性和习惯"></a>3. 兼容性和习惯</h3><p>传统的拷贝初始化在 C++ 早期就已经存在，在旧代码中更为常见；而列表初始化是 C++11 引入的新特性，如果你使用的是支持 C++11 及以上标准的编译器，并且希望代码更加安全和统一，推荐使用列表初始化。</p><p>综上所述，<code>uint32_t mWidth &#123;0&#125;;</code> 是一种合法且有优势的初始化方式，你可以根据具体的需求和场景选择合适的初始化方法。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt开发时遇到的诡异问题</title>
      <link href="/qt/qt-problem/"/>
      <url>/qt/qt-problem/</url>
      
        <content type="html"><![CDATA[<h3 id="1-QT5-15-2在程序退出时崩溃：提示QBasicTimer-start-QBasicTimer-can-only-be-used-with-threads-started-with-QThread"><a href="#1-QT5-15-2在程序退出时崩溃：提示QBasicTimer-start-QBasicTimer-can-only-be-used-with-threads-started-with-QThread" class="headerlink" title="1. QT5.15.2在程序退出时崩溃：提示QBasicTimer::start: QBasicTimer can only be used with threads started with QThread"></a>1. QT5.15.2在程序退出时崩溃：提示QBasicTimer::start: QBasicTimer can only be used with threads started with QThread</h3><p><img src="/qt/qt-problem/image-20250116162617267.png" alt="image-20250116162617267"></p><p>我的是QComboBox引发的问题，我最开始因为一些原因将主界面设置成了单例类，去掉之后就好了。</p><p><img src="/qt/qt-problem/image-20250116163606100.png" alt="image-20250116163606100"><br><img src="/qt/qt-problem/image-20250116163712749.png" alt="image-20250116163712749"></p><p>引发的原因可以不一样，可以通过一点一点删除最后定位到原因。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VAO_VBO</title>
      <link href="/opengl/vao_vbo/"/>
      <url>/opengl/vao_vbo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数解析"><a href="#1-函数解析" class="headerlink" title="1. 函数解析"></a>1. 函数解析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">initializeOpenGLFunctions</span>();</span><br></pre></td></tr></table></figure><p>初始化OpenGL函数，将Qt里的函数指针指向显卡的函数，这样如glGenBuffers()这样的函数实际操作的就是显卡上的内存了。</p><h3 id="1-1-VBO"><a href="#1-1-VBO" class="headerlink" title="1.1 VBO"></a>1.1 VBO</h3><p><code>VBO</code>(Vertex Buffer Object):<strong>顶点缓冲区对象</strong>。</p><ul><li><code>VBO</code> 是一种用于在 GPU 中存储数据（例如顶点数据）的缓冲区对象。</li><li><code>VBO</code> 存储的是实际的顶点数据、索引数据，如坐标分量，颜色等。</li><li>通过把顶点数据上传到 <code>VBO</code> 中，可以让 OpenGL 在渲染过程中直接从显存读取数据。</li><li><code>VBO</code> 不保存顶点数据的布局或如何处理这些数据的信息。它只是简单地存储一段内存区域，数据是原始的顶点数据。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> VBO;</span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br></pre></td></tr></table></figure><p><code>unsigned int VBO;</code>是在CPU上创建了一个int类型的缓冲Id。</p><p><code>glGenBuffers(1, &amp;VBO);</code>相当于在GPU上创建了一个缓冲区对象标识符（buffer object identifier），也就是一个在 OpenGL 上下文中使用的唯一 整数标识符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br></pre></td></tr></table></figure><p>将OpenGL中的GL_ARRAY_BUFFER缓冲区指向通过<code>glGenBuffers(1, &amp;VBO);</code>生成的缓冲区对象标识符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure><p>在显卡的显存中分配一块区域，并将顶点数据从主机内存CPU传到显卡内存GPU。</p><h3 id="1-2-VAO"><a href="#1-2-VAO" class="headerlink" title="1.2 VAO"></a>1.2 VAO</h3><p><code>VAO</code>(Vertex Array Object):<strong>顶点数组对象</strong>。</p><ul><li><code>VAO</code> 是一个用来存储与顶点数据相关的状态的对象。它用于记录顶点数据的绑定情况（比如，顶点缓冲区对象 <code>VBO</code> 的绑定，顶点属性指针等）。</li><li>在渲染过程中，OpenGL 不直接处理顶点数据，而是通过绑定一个 <code>VAO</code> 来告知 OpenGL 如何从相应的缓冲区中获取顶点数据。<code>VAO</code> 记录了顶点数据的格式（例如每个顶点有多少个属性，属性的类型是什么，如何从缓冲区中获取这些数据等）。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> VAO;</span><br><span class="line"><span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br></pre></td></tr></table></figure><ul><li>与<code>VBO</code>不同的是，<code>glGenVertexArrays(1, &amp;VAO);</code>会在 GPU 上创建一个 <strong>唯一的标识符</strong>，该标识符代表一个顶点数组对象。</li><li>会生成一个唯一的整数 <code>VAO</code>，它是一个指向顶点数组对象的 <strong>句柄</strong>（或标识符），你可以用它来进行 <code>glBindVertexArray()</code> 操作，将该 <code>VAO</code> 绑定到当前的上下文中。</li><li>一旦 VAO 被绑定，它将为该状态生效，之后的顶点缓冲区和顶点属性设置都会与该 VAO 关联。这样，通过切换不同的 VAO，你可以快速切换多个渲染对象的顶点数据和配置。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBindVertexArray</span>(VAO);</span><br></pre></td></tr></table></figure><p>将<code>VAO</code> 绑定到当前的OpenGL上下文中，<strong>同一时刻只能绑定一个 VAO（顶点数组对象）</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////-----只是用来举例的数据-----///////////////////////////////</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">glVertexAttribPointer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    GLuint index,        <span class="comment">// 顶点属性的索引，通常是顶点着色器中的位置</span></span></span></span><br><span class="line"><span class="params"><span class="function">    GLint size,          <span class="comment">// 每个顶点属性的组件数量（例如，3表示 x, y, z）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    GLenum type,         <span class="comment">// 数据类型（GL_FLOAT, GL_INT, GL_UNSIGNED_BYTE等）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    GLboolean normalized, <span class="comment">// 是否将数据归一化</span></span></span></span><br><span class="line"><span class="params"><span class="function">    GLsizei stride,      <span class="comment">// 相邻顶点间的字节偏移量</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">void</span> *pointer  <span class="comment">// 顶点数据的起始位置</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="type">float</span> vertices[<span class="number">20</span>] = &#123;</span><br><span class="line">        <span class="comment">// position(-1~1)   // texture coords(0~1)</span></span><br><span class="line">        <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">0.0f</span>,       <span class="number">1.0f</span>, <span class="number">1.0f</span>,    <span class="comment">// top right</span></span><br><span class="line">        <span class="number">1</span>,  <span class="number">-1</span>, <span class="number">0.0f</span>,       <span class="number">1.0f</span>, <span class="number">0.0f</span>,    <span class="comment">// bottom right</span></span><br><span class="line">        <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0.0f</span>,       <span class="number">0.0f</span>, <span class="number">0.0f</span>,    <span class="comment">// bottom left</span></span><br><span class="line">        <span class="number">-1</span>, <span class="number">1</span>,  <span class="number">0.0f</span>,       <span class="number">0.0f</span>, <span class="number">1.0f</span>,    <span class="comment">// top left</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">5</span> * <span class="built_in">sizeof</span>(<span class="type">float</span>), (<span class="type">void</span>*)<span class="number">0</span>);</span><br><span class="line"><span class="built_in">glVertexAttribPointer</span>(<span class="number">1</span>, <span class="number">2</span>, GL_FLOAT, GL_FALSE, <span class="number">5</span> * <span class="built_in">sizeof</span>(<span class="type">float</span>), (<span class="type">void</span>*)(<span class="number">3</span> * <span class="built_in">sizeof</span>(<span class="type">float</span>)));</span><br></pre></td></tr></table></figure><ul><li>第一个参数是指传到顶点着色器的位置索引，是用来给顶点着色器使用的。</li></ul><p><img src="/opengl/vao_vbo/image-20241210102940749.png" alt="image-20241210102940749"></p><ul><li>第二个参数是每个顶点属性的大小。比如位置顶点属性是一个vec3(xyz)，由3个值组成，大小就是3。纹理属性是一个vec2，大小就是2。</li><li>第三个参数指定数据的类型。</li><li>第四个参数指是否希望数据被标准化(Normalize)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。这里我们把它设置为GL_FALSE。</li><li>第五个参数叫做步长(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在5个float之后，我们把步长设置为5 * sizeof(float)。</li><li>最后一个参数的类型是void*，数据指针，表示这个属性的数据在缓冲中起始位置的偏移量(Offset)，在本例中position偏移量为0，texture为3 * sizeof(float)。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>); <span class="comment">// 启用某个位置的索引</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class="number">0</span>); <span class="comment">// 解绑</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBindVertexArray</span>(<span class="number">0</span>); <span class="comment">// 解绑</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每当需要绘制新的一帧时，通常会先清除当前帧缓冲区，以确保上一帧的图像不干扰当前帧的渲染</span></span><br><span class="line"><span class="built_in">glClearColor</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);   <span class="comment">// 设置清除颜色</span></span><br><span class="line"><span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);   <span class="comment">// 清除颜色缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line"><span class="comment">//使用当前绑定的 VAO 中的顶点数据，从第一个顶点开始绘制 3 个顶点，形成一个三角形</span></span><br><span class="line"><span class="comment">//OpenGL可以绘制多种类型的图形，比如点（GL_POINTS）、线（GL_LINES）、三角形（GL_TRIANGLES）等。</span></span><br><span class="line"><span class="built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建OpenGL界面</title>
      <link href="/opengl/opengl-config/"/>
      <url>/opengl/opengl-config/</url>
      
        <content type="html"><![CDATA[<p><strong>项目仓库：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/yongwang12138/learn-open-gl.git</span><br></pre></td></tr></table></figure><p><img src="/opengl/opengl-config/image-20241127205155850.png" alt="image-20241127205155850"></p><h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h3><p><img src="/opengl/opengl-config/image-20241127204359317.png" alt="image-20241127204359317"></p><h3 id="2-新建OpenGL类"><a href="#2-新建OpenGL类" class="headerlink" title="2. 新建OpenGL类"></a>2. 新建OpenGL类</h3><p>继承于<code>QOpenGLWidget</code>和<code>QOpenGLFunctions</code></p><p><img src="/opengl/opengl-config/image-20241127204528007.png" alt="image-20241127204528007"></p><h3 id="3-重写对应的虚函数"><a href="#3-重写对应的虚函数" class="headerlink" title="3. 重写对应的虚函数"></a>3. 重写对应的虚函数</h3><p><img src="/opengl/opengl-config/image-20241127204840219.png" alt="image-20241127204840219"></p><h3 id="4-将界面上的对象提升为自定义的OpenGL类"><a href="#4-将界面上的对象提升为自定义的OpenGL类" class="headerlink" title="4. 将界面上的对象提升为自定义的OpenGL类"></a>4. 将界面上的对象提升为自定义的OpenGL类</h3><p><img src="/opengl/opengl-config/image-20241127205023352.png" alt="image-20241127205023352"></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt打包</title>
      <link href="/qt/qt-package/"/>
      <url>/qt/qt-package/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Windows平台"><a href="#1-Windows平台" class="headerlink" title="1. Windows平台"></a>1. Windows平台</h1><h2 id="1-1-使用windeployqt-exe工具打包"><a href="#1-1-使用windeployqt-exe工具打包" class="headerlink" title="1.1 使用windeployqt.exe工具打包"></a>1.1 使用windeployqt.exe工具打包</h2><p>可以为windeployqt.exe添加环境变量</p><h3 id="1-1-1-无法定位程序的输入点"><a href="#1-1-1-无法定位程序的输入点" class="headerlink" title="1.1.1 无法定位程序的输入点"></a>1.1.1 无法定位程序的输入点</h3><p>原因：windeployqt.exe工具在查询所需库时首先从环境变量中进行寻找，没有使用Qt本身下的路径。</p><p>比如：D:\Qt\Qt5.15.2\5.15.2\mingw81_32\plugins\platforms目录下复制qwindows.dll到运行目录下的platforms文件夹下</p><p>可以使用everything工具查看</p><h2 id="1-2-打包"><a href="#1-2-打包" class="headerlink" title="1.2. 打包"></a>1.2. 打包</h2><p>使用Inno Setup软件进行打包</p><p><img src="/qt/qt-package/image-20250113142153059.png" alt="image-20250113142153059"></p><p><img src="/qt/qt-package/image-20250113142552650.png" alt="image-20250113142552650"></p><p><img src="/qt/qt-package/image-20250113142711823.png" alt="image-20250113142711823"></p><p><img src="/qt/qt-package/image-20250113142915093.png" alt="image-20250113142915093"></p><p><img src="/qt/qt-package/image-20250113144633239.png" alt="image-20250113144633239"></p><p><img src="/qt/qt-package/image-20250113144802044.png" alt="image-20250113144802044"></p><p><img src="/qt/qt-package/image-20250113144905362.png" alt="image-20250113144905362"></p><p><img src="/qt/qt-package/image-20250113145131090.png" alt="image-20250113145131090"></p><p><img src="/qt/qt-package/image-20250113145200111.png" alt="image-20250113145200111"></p><p><img src="/qt/qt-package/image-20250113145240795.png" alt="image-20250113145240795"></p><p><img src="/qt/qt-package/image-20250113145403964.png" alt="image-20250113145403964"></p><p><img src="/qt/qt-package/image-20250113145447390.png" alt="image-20250113145447390"></p><p><img src="/qt/qt-package/image-20250113145537492.png" alt="image-20250113145537492"></p><p><img src="/qt/qt-package/image-20250113145834576.png" alt="image-20250113145834576"></p><p><img src="/qt/qt-package/image-20250113145924492.png" alt="image-20250113145924492"></p><p><img src="/qt/qt-package/image-20250113145951458.png" alt="image-20250113145951458"></p><h1 id="2-Linux平台"><a href="#2-Linux平台" class="headerlink" title="2. Linux平台"></a>2. Linux平台</h1><h2 id="2-1-linuxdeployqt下载安装"><a href="#2-1-linuxdeployqt下载安装" class="headerlink" title="2.1 linuxdeployqt下载安装"></a>2.1 linuxdeployqt下载安装</h2><p> 下载地址：<a href="https://github.com/probonopd/linuxdeployqt/releases">https://github.com/probonopd/linuxdeployqt/releases</a></p><p><img src="/qt/qt-package/image-20250317104001405.png" alt="image-20250317104001405"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> linuxdeployqt-continuous-x86_64.AppImage linuxdeployqt</span><br><span class="line"><span class="built_in">chmod</span> 777 linuxdeployqt</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> linuxdeployqt /usr/local/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">linuxdeployqt --version</span><br></pre></td></tr></table></figure><h2 id="2-2-Qt环境变量配置"><a href="#2-2-Qt环境变量配置" class="headerlink" title="2.2 Qt环境变量配置"></a>2.2 Qt环境变量配置</h2><p>工具会根据生成的可执行文件，自动搜索依赖，<br>所以我们需要确保Qt库的相关路径设置到环境变量中，这样工具在搜索时才能找到，并拷贝它们。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/opt/Qt/5.15.2/gcc_64/bin:$PATH</span><br><span class="line">export LIB_PATH=/opt/Qt/5.15.2/gcc_64/lib:$LIB_PATH</span><br><span class="line">export PLUGIN_PATH=/opt/Qt/5.15.2/gcc_64/plugins:$PLUGIN_PATH</span><br><span class="line">export QML2_PATH=/opt/Qt/5.15.2/gcc_64/qml:$QML2_PATH</span><br></pre></td></tr></table></figure><p><img src="/qt/qt-package/image-20250317104706289.png" alt="image-20250317104706289"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让文件立即生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">qmake -v</span><br></pre></td></tr></table></figure><h2 id="2-3-安装patchelf-不一定需要"><a href="#2-3-安装patchelf-不一定需要" class="headerlink" title="2.3 安装patchelf(不一定需要)"></a>2.3 安装patchelf(不一定需要)</h2><p>patchelf 是一个用于修改 ELF（Executable and Linkable Format）格式可执行文件和共享库的工具，主要用于解决 Linux 环境下程序的动态库依赖问题。其核心功能包括：</p><ul><li>‌修改动态链接器（Interpreter）‌<br>可调整程序使用的动态链接器（如 &#x2F;lib&#x2F;ld-linux-x86-64.so.2），使其适配特定版本的 glibc 或其他系统环境‌。</li><li>‌设置运行时库搜索路径（RPATH&#x2F;RUNPATH）‌<br>通过设定 RPATH，强制程序在运行时优先从指定路径加载动态库，而非依赖系统默认路径或 LD_LIBRARY_PATH 环境变量‌。</li><li>‌修改动态库依赖关系‌<br>可添加、删除或替换程序依赖的共享库（如替换旧版本库名为新版本）‌。</li><li>‌调整 ELF 文件结构‌<br>支持修改页对齐大小、SONAME 等 ELF 头信息，优化文件兼容性‌。</li></ul><p>典型应用场景</p><ul><li>解决动态库版本冲突‌：当程序依赖特定版本的库文件时，可通过 patchelf 直接绑定自定义路径的库文件‌。</li><li>‌程序打包与移植‌：在打包程序时，通过设置 RPATH 使程序独立于系统环境，避免依赖系统路径的库文件‌。</li><li>‌跨系统兼容性‌：在旧系统上运行为新系统编译的程序时，可修改动态链接器以适配旧版 glibc‌。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install patchelf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $ORIGIN 是一个特殊的占位符，它代表可执行文件自身所在的目录</span></span><br><span class="line">patchelf --set-rpath <span class="string">&#x27;$ORIGIN/lib/&#x27;</span> ./video_system <span class="comment"># 设置程序动态库链接路径</span></span><br><span class="line">patchelf --print-rpath ./video_system <span class="comment"># 打印链接路径</span></span><br></pre></td></tr></table></figure><h2 id="2-4-打包"><a href="#2-4-打包" class="headerlink" title="2.4 打包"></a>2.4 打包</h2><h3 id="2-4-1-使用linuxdeployqt加载全部依赖"><a href="#2-4-1-使用linuxdeployqt加载全部依赖" class="headerlink" title="2.4.1 使用linuxdeployqt加载全部依赖"></a>2.4.1 使用linuxdeployqt加载全部依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linuxdeployqt video_system -appimage</span><br></pre></td></tr></table></figure><div class="note red flat"><p><strong>可执行程序</strong>不能放在<strong>bin</strong>路径下，否则会将打包的文件会放在bin文件夹外</p><p>打包完成后要先验证将整个目录拷贝到目标电脑上是否可以运行</p></div><h3 id="2-4-2-使用dpkg打包安装程序"><a href="#2-4-2-使用dpkg打包安装程序" class="headerlink" title="2.4.2 使用dpkg打包安装程序"></a>2.4.2 使用dpkg打包安装程序</h3><p>目录结构：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LRA[PACKAGE_LINUX] --&gt; B[output&#x2F;video-alarm_1.0.0_amd64.deb]A[PACKAGE_LINUX] --&gt; C[video-alarm]C[video-alarm] --&gt; D[usr&#x2F;share]     D --&gt; E[applications&#x2F;video_system.desktop]     D --&gt; F[video-alarm&#x2F;jydimage.ico]    C[video-alarm] --&gt; G[opt&#x2F;video-alarm&#x2F;video_system]C[video-alarm] --&gt; H[DEBIAN&#x2F;control]A[PACKAGE_LINUX] --&gt; I[create_deb.sh]A[PACKAGE_LINUX] --&gt; J[uninstall_deb.sh]  </pre></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE_LINUX/                    # 打包根目录</span><br><span class="line">├── output/</span><br><span class="line">│   └── video-alarm_1.0.0_amd64.deb  # 生成的 DEB 包</span><br><span class="line">├── video-alarm/                  # DEB 包构建目录（名称自定）</span><br><span class="line">│   ├── DEBIAN/  # 控制文件目录（必须大写）</span><br><span class="line">│   │   └── control               # 包元数据文件</span><br><span class="line">│   ├── opt/</span><br><span class="line">│   │   └── video_alarm/          # 程序主安装目录</span><br><span class="line">│   │       └── video_alarm       # 可执行程序            </span><br><span class="line">│   │       ├── lib/   # 依赖库目录</span><br><span class="line">│   │       └── ...               # 其他依赖文件或者配置文件</span><br><span class="line">│   └── usr/</span><br><span class="line">│       └── share/</span><br><span class="line">│           ├── applications/</span><br><span class="line">│           │   └── video_system.desktop  # 开始菜单快捷方式</span><br><span class="line">│           └── video-alarm/</span><br><span class="line">│               └── jydimage.png   # 标准图标</span><br><span class="line">├── create_deb.sh                 # 构建脚本</span><br><span class="line">└── uninstall_deb.sh              # 卸载脚本</span><br></pre></td></tr></table></figure><p><strong>control文件示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Package: video-alarm</span><br><span class="line">Version: 1.0.0</span><br><span class="line">Architecture: all</span><br><span class="line">Maintainer: 北京竞业达数字系统科技有限公司</span><br><span class="line">Description: 考场应急呼叫平台</span><br></pre></td></tr></table></figure><p><strong>video_system.desktop 文件示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=考场应急呼叫平台</span><br><span class="line">Version=1.0</span><br><span class="line">Exec=/opt/video-alarm/video_system</span><br><span class="line">Icon=/usr/share/video-alarm/jydimage.ico</span><br><span class="line">Terminal=false</span><br><span class="line">Categories=Utility;</span><br></pre></td></tr></table></figure><p><strong>create_deb.sh 文件示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">sudo dpkg-deb --build video-alarm output/video-alarm_1.0.0_amd64.deb</span><br><span class="line">exit $?</span><br></pre></td></tr></table></figure><p><strong>uninstall_deb.sh 文件示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">sudo dpkg --remove video-alarm</span><br><span class="line">exit $?</span><br></pre></td></tr></table></figure><h4 id="可能遇到的错误："><a href="#可能遇到的错误：" class="headerlink" title="可能遇到的错误："></a>可能遇到的错误：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wyw@Deepin:~/Desktop/packet$ ./create_deb.sh </span><br><span class="line">dpkg-deb: 错误: 软件包的名字含有不是小写字母或 -+ 的字符</span><br></pre></td></tr></table></figure><p><img src="/qt/qt-package/image-20250320180019196.png" alt="image-20250320180019196"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wyw@Deepin:~/Desktop/packet$ ./create_deb.sh </span><br><span class="line">dpkg-deb: 错误: control目录的的权限位是 777 (必须 &gt;=0755 且 &lt;=0755)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将DEBIAN目录权限设置为755</span></span><br><span class="line">wyw@Deepin:~/Desktop/packet/video_alarm$ chmod 755 DEBIAN/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置</title>
      <link href="/other/vscode-config/"/>
      <url>/other/vscode-config/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Vscode-左侧文件栏缩进设置"><a href="#1-Vscode-左侧文件栏缩进设置" class="headerlink" title="1. Vscode 左侧文件栏缩进设置"></a>1. Vscode 左侧文件栏缩进设置</h3><p><img src="/other/vscode-config/image-20240912232948888.png" alt="image-20240912232948888"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake教程</title>
      <link href="/cplusplus/cmake-primer/"/>
      <url>/cplusplus/cmake-primer/</url>
      
        <content type="html"><![CDATA[<h3 id="1-常用的宏"><a href="#1-常用的宏" class="headerlink" title="1. 常用的宏"></a>1. 常用的宏</h3><table><thead><tr><th align="center">宏</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>CMAKE_SOURCE_DIR</code></td><td align="center">顶层CMakeLists.txt文件所在的根目录</td></tr><tr><td align="center"><code>CMAKE_CURRENT_SOURCE_DIR</code></td><td align="center">当前访问的 CMakeLists.txt 文件所在的路径</td></tr><tr><td align="center"><code>PROJECT_SOURCE_DIR</code></td><td align="center">使用cmake命令时，后面紧跟的目录，一般是工程的根目录</td></tr><tr><td align="center"><code>EXECUTABLE_OUTPUT_PATH</code></td><td align="center">指定输出的目录（CMake 3.0 版本开始已被弃用）</td></tr><tr><td align="center"><code>LIBRARY_OUTPUT_PATH</code></td><td align="center">指定输出库目录（CMake 3.0 版本开始已被弃用）</td></tr><tr><td align="center">CMAKE_AUTORCC</td><td align="center">指定CMake是否会自动处理Qt资源文件</td></tr><tr><td align="center">CMAKE_BINARY_DIR</td><td align="center">可执行程序的输出路径</td></tr></tbody></table><h3 id="2-最简单的CMakeLists-txt文件"><a href="#2-最简单的CMakeLists-txt文件" class="headerlink" title="2. 最简单的CMakeLists.txt文件"></a>2. 最简单的CMakeLists.txt文件</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定使用的 cmake 的最低版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.8</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目名称 项目版本  项目使用的编程语言</span></span><br><span class="line"><span class="keyword">project</span> (Master VERSION <span class="number">0.1</span> LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可执行程序名 源文件名称</span></span><br><span class="line"><span class="keyword">add_executable</span> (app main.cpp)</span><br></pre></td></tr></table></figure><h3 id="3-指定使用的C-标准"><a href="#3-指定使用的C-标准" class="headerlink" title="3. 指定使用的C++标准"></a>3. 指定使用的C++标准</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加-std=c++11</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="comment">#增加-std=c++14</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="comment">#增加-std=c++17</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"><span class="comment"># 要求编译器必须支持 否则报错</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure><h3 id="4-指定输出路径"><a href="#4-指定输出路径" class="headerlink" title="4. 指定输出路径"></a>4. 指定输出路径</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定输出的路径 若不存在会自动生成 ---------- （CMake 3.0 版本开始已被弃用）</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置可执行文件的输出路径 ------------- 使用推荐的方式设置输出路径</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(openGL PROPERTIES</span><br><span class="line">    RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 对于不同的构建类型(Debug,Release)可以使用RUNTIME_OUTPUT_DIRECTORY_DEBUG和RUNTIME_OUTPUT_DIRECTORY_RELEASE来设置输出路径。</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(openGL PROPERTIES</span><br><span class="line">    RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin/Debug</span><br><span class="line">    RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin/Release</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="5-搜索文件"><a href="#5-搜索文件" class="headerlink" title="5. 搜索文件"></a>5. 搜索文件</h3><h4 id="5-1-aux-source-directory函数"><a href="#5-1-aux-source-directory函数" class="headerlink" title="5.1 aux_source_directory函数"></a>5.1 aux_source_directory函数</h4><p>在 CMake 中使用aux_source_directory 命令可以查找某个路径下的所有源文件，命令格式为：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(&lt; dir &gt; &lt; variable &gt;)</span><br></pre></td></tr></table></figure><ul><li><code>dir</code>：要搜索的目录</li><li><code>variable</code>：将从<code>dir</code>目录下搜索到的源文件列表存储到该变量中</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.8</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (Master VERSION <span class="number">0.1</span> LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定C++版本为C++17</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索 src 目录下的源文件 $&#123;CMAKE_CURRENT_SOURCE_DIR&#125; 等价于 .</span></span><br><span class="line"><span class="comment"># aux_source_directory($&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src SRC_LIST)</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./src SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定输出的路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可执行程序名 源文件名称</span></span><br><span class="line"><span class="keyword">add_executable</span> (app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="5-2-file函数"><a href="#5-2-file函数" class="headerlink" title="5.2 file函数"></a>5.2 file函数</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</span><br></pre></td></tr></table></figure><ul><li><code>GLOB</code>: 将指定目录下搜索到的满足条件的所有文件名生成一个列表，并将其存储到变量中。</li><li><code>GLOB_RECURSE</code>：递归搜索指定目录，将搜索到的满足条件的文件名生成一个列表，并将其存储到变量中。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_SRC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>/*.h)</span><br></pre></td></tr></table></figure><h3 id="6-包含头文件"><a href="#6-包含头文件" class="headerlink" title="6. 包含头文件"></a>6. 包含头文件</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><h3 id="7-创建库"><a href="#7-创建库" class="headerlink" title="7. 创建库"></a>7. 创建库</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(&lt;<span class="keyword">target</span>&gt; &lt;source_files&gt;...)</span><br></pre></td></tr></table></figure><h4 id="7-1-制作静态库"><a href="#7-1-制作静态库" class="headerlink" title="7.1 制作静态库"></a>7.1 制作静态库</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(calc STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="7-2-制作动态库"><a href="#7-2-制作动态库" class="headerlink" title="7.2 制作动态库"></a>7.2 制作动态库</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(calc SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="7-3-指定输出的路径"><a href="#7-3-指定输出的路径" class="headerlink" title="7.3 指定输出的路径"></a>7.3 指定输出的路径</h4><h4 id="7-3-1-CMake-3-0-版本之前"><a href="#7-3-1-CMake-3-0-版本之前" class="headerlink" title="7.3.1 CMake 3.0 版本之前"></a>7.3.1 CMake 3.0 版本之前</h4><h5 id="方式1-适用于动态库"><a href="#方式1-适用于动态库" class="headerlink" title="方式1-适用于动态库"></a>方式1-适用于动态库</h5><p>对于生成的库文件来说和可执行程序一样都可以指定输出路径。由于在<code>Linux下生成的动态库默认是有执行权限的</code>，所以可以按照生成可执行程序的方式去指定它生成的目录：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="comment"># 设置动态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">add_library</span>(calc SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h5 id="方式2-都适用"><a href="#方式2-都适用" class="headerlink" title="方式2-都适用"></a>方式2-都适用</h5><p>由于在Linux下生成的静态库默认不具有可执行权限，所以在指定静态库生成的路径的时候就不能使用<code>EXECUTABLE_OUTPUT_PATH</code>宏了，而应该使用<code>LIBRARY_OUTPUT_PATH</code>，<code>这个宏对应静态库文件和动态库文件都适用</code>。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="comment"># 设置动态库/静态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 生成动态库</span></span><br><span class="line"><span class="comment">#add_library(calc SHARED $&#123;SRC_LIST&#125;)</span></span><br><span class="line"><span class="comment"># 生成静态库</span></span><br><span class="line"><span class="keyword">add_library</span>(calc STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="7-3-2-CMake-3-0-版本之后"><a href="#7-3-2-CMake-3-0-版本之后" class="headerlink" title="7.3.2 CMake 3.0 版本之后"></a>7.3.2 CMake 3.0 版本之后</h4><h5 id="适用于静态库"><a href="#适用于静态库" class="headerlink" title="适用于静态库"></a>适用于静态库</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.29</span>)</span><br><span class="line"><span class="keyword">project</span>(FUNC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_FUNC <span class="string">&quot;./*.cpp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态库</span></span><br><span class="line"><span class="keyword">add_library</span>(func STATIC <span class="variable">$&#123;SRC_FUNC&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态库生成路径</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(func PROPERTIES</span><br><span class="line">ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="8-包含库文件"><a href="#8-包含库文件" class="headerlink" title="8. 包含库文件"></a>8. 包含库文件</h3><h4 id="8-1-链接静态库"><a href="#8-1-链接静态库" class="headerlink" title="8.1 链接静态库"></a>8.1 链接静态库</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">link_libraries</span>(&lt;static lib&gt; [&lt;static lib&gt;...])</span><br></pre></td></tr></table></figure><p>用于设置全局链接库，这些库会链接到之后定义的所有目标上。</p><ul><li><p>参数1：指定出要链接的静态库的名字</p></li><li><p>参数2-N：要链接的其它静态库的名字</p></li></ul><p>如果该静态库不是系统提供的（自己制作或者使用第三方提供的静态库）可能出现静态库找不到的情况，此时可以将静态库的路径也指定出来：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">link_directories</span>(&lt;lib path&gt;)</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="comment"># 搜索指定目录下源文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="comment"># 包含头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 包含静态库路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 链接静态库</span></span><br><span class="line"><span class="keyword">link_libraries</span>(calc)</span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="8-2-链接动态库"><a href="#8-2-链接动态库" class="headerlink" title="8.2 链接动态库"></a>8.2 链接动态库</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">    &lt;<span class="keyword">target</span>&gt; </span><br><span class="line">    &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;... </span><br><span class="line">    [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)</span><br></pre></td></tr></table></figure><p>用于指定一个目标（如可执行文件或库）在编译时需要链接哪些库。它支持指定库的名称、路径以及链接库的顺序。</p><p><code>target</code>：指定要加载的库的文件的名字</p><ul><li><p>该文件可能是一个源文件</p></li><li><p>该文件可能是一个动态库&#x2F;静态库文件</p></li><li><p>该文件可能是一个可执行文件</p></li></ul><p><code>PRIVATE|PUBLIC|INTERFACE</code>：动态库的访问权限，默认为PUBLIC</p><ul><li><p>如果各个动态库之间没有依赖关系，无需做任何设置，三者没有没有区别，<code>一般无需指定，使用默认的 PUBLIC 即可</code>。</p></li><li><p><code>动态库的链接具有传递性</code>，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法。</p></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(A B C)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(D A)</span><br></pre></td></tr></table></figure><ul><li><code>PUBLIC</code>：在public后面的库会被Link到前面的target中，并且里面的符号也会被导出，提供给第三方使用。</li><li><code>PRIVATE</code>：在private后面的库仅被link到前面的target中，并且终结掉，第三方不能感知你调了啥库</li><li><code>INTERFACE</code>：在interface后面引入的库不会被链接到前面的target中，只会导出符号。</li></ul><p><strong>链接系统动态库</strong></p><p>动态库的链接和静态库是完全不同的：</p><ul><li><p>静态库会在生成可执行程序的链接阶段被打包到可执行程序中，所以可执行程序启动，静态库就被加载到内存中了。</p></li><li><p>动态库在生成可执行程序的链接阶段不会被打包到可执行程序中，当可执行程序被启动并且调用了动态库中的函数的时候，动态库才会被加载到内存</p></li></ul><p>因此，在<code>cmake</code>中指定要链接的动态库的时候，<code>应该将命令写到生成了可执行文件之后</code>：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 添加并指定最终生成的可执行程序名</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 指定可执行程序要链接的动态库名字</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread)</span><br></pre></td></tr></table></figure><p>在<code>target_link_libraries(app pthread)</code>中：</p><p><code>app</code>: 对应的是最终生成的可执行程序的名字<br><code>pthread</code>：这是可执行程序要加载的动态库，这个库是系统提供的线程库，全名为<code>libpthread.so</code>，在指定的时候一般会掐头（lib）去尾（.so）。</p><p><strong>链接第三方动态库</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 指定源文件或者动态库对应的头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 指定要链接的动态库的路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 添加并生成一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 指定要链接的动态库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app calc)</span><br></pre></td></tr></table></figure><div class="note blue flat"><p>建议在 CMake 项目中优先使用 target_link_libraries</p></div><h3 id="9-日志"><a href="#9-日志" class="headerlink" title="9. 日志"></a>9. 日志</h3><p>在CMake中可以用用户显示一条消息，该命令的名字为<code>message</code>：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message</span>([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] <span class="string">&quot;message to display&quot;</span> ...)</span><br></pre></td></tr></table></figure><ul><li><p>(无) ：重要消息</p></li><li><p>STATUS ：非重要消息</p></li><li><p>WARNING：CMake 警告, 会继续执行</p></li><li><p>AUTHOR_WARNING：CMake 警告 (dev), 会继续执行</p></li><li><p>SEND_ERROR：CMake 错误, 继续执行，但是会跳过生成的步骤</p></li><li><p>FATAL_ERROR：CMake 错误, 终止所有处理过程</p></li></ul><p>CMake的命令行工具会在stdout上显示STATUS消息，在stderr上显示其他所有消息。CMake的GUI会在它的log区域显示所有消息。</p><p>CMake警告和错误消息的文本显示使用的是一种简单的标记语言。文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出一般日志信息</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 输出警告信息</span></span><br><span class="line"><span class="keyword">message</span>(WARNING <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 输出错误信息</span></span><br><span class="line"><span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="10-install"><a href="#10-install" class="headerlink" title="10. install"></a>10. install</h3><p> install命令用于将文件或目录安装到指定位置，常用于二进制执行文件、动态库、静态库的部署。</p><p>install不是自动执行的，需在命令行执行<code>cmake install</code></p><table><thead><tr><th align="center"><strong>选项</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">RUNTIME</td><td align="center">二进制可执行文件</td></tr><tr><td align="center">LIBRARY</td><td align="center">动态库</td></tr><tr><td align="center">ARCHIVE</td><td align="center">静态库</td></tr></tbody></table><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS &lt;target_name&gt; </span><br><span class="line">        [RUNTIME | LIBRARY | ARCHIVE] DESTINATION &lt;target_dir&gt;</span><br><span class="line">        ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>GNUInstallDirs</strong>标准安装目录</p><table><thead><tr><th align="center">目标类型</th><th align="center">GNUInstallDirs变量</th><th align="center">内置默认值</th></tr></thead><tbody><tr><td align="center">RUNTIME</td><td align="center">${CMAKE_INSTALL_BINDIR}</td><td align="center">bin</td></tr><tr><td align="center">LIBRARY</td><td align="center">${CMAKE_INSTALL_BINDIR}</td><td align="center">lib</td></tr><tr><td align="center">ARCHIVE</td><td align="center">${CMAKE_INSTALL_BINDIR}</td><td align="center">lib</td></tr><tr><td align="center">PRIVATE_HEADER</td><td align="center">${CMAKE_INSTALL_INCLUDEDIR}</td><td align="center">include</td></tr><tr><td align="center">PUBLIC_HEADER</td><td align="center">${CMAKE_INSTALL_INCLUDEDIR}</td><td align="center">include</td></tr><tr><td align="center">FILE_SET (头文件类型)</td><td align="center">${CMAKE_INSTALL_INCLUDEDIR}</td><td align="center">include</td></tr></tbody></table><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(GNUInstallDirs)</span><br><span class="line"><span class="keyword">install</span>(TARGETS app </span><br><span class="line">    RUNTIME DESTINATION <span class="variable">$&#123;CMAKE_INSTALL_BINDIR&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="11-添加子目录"><a href="#11-添加子目录" class="headerlink" title="11. 添加子目录"></a>11. 添加子目录</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure><h3 id="12-与Qt相关的变量"><a href="#12-与Qt相关的变量" class="headerlink" title="12. 与Qt相关的变量"></a>12. 与Qt相关的变量</h3><p><strong>UIC（用户界面编译器）、MOC（元对象编译器）和RCC（资源编译器）</strong></p><h4 id="12-1-自动处理-ui文件文件"><a href="#12-1-自动处理-ui文件文件" class="headerlink" title="12.1 自动处理.ui文件文件"></a>12.1 自动处理<code>.ui</code>文件文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_AUTOUIC <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure><p>启用了CMake的自动UIC支持。当此选项被设置为ON时，CMake将自动检测项目中的<code>.ui</code>文件（Qt Designer创建的用户界面文件），并使用UIC工具将这些文件转换成C++源文件，然后这些源文件会被自动添加到相应的Qt目标（如库或可执行文件）的编译过程中。这样，开发者就不需要手动编写CMake脚本来调用UIC或处理其输出文件。</p><h4 id="12-2-自动处理继承QObject的类"><a href="#12-2-自动处理继承QObject的类" class="headerlink" title="12.2 自动处理继承QObject的类"></a>12.2 自动处理继承QObject的类</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure><p>启用了CMake的自动MOC支持。当此选项被设置为ON时，CMake将自动检测项目中继承自<code>QObject</code>的类（这些类需要使用MOC进行元对象信息的生成），并调用MOC工具来生成必要的元对象代码。这些生成的代码文件随后会被自动添加到项目的编译过程中。这对于使用Qt信号和槽机制、属性系统、事件系统等特性的类来说是必需的。</p><h4 id="12-3-自动处理Qt资源文件"><a href="#12-3-自动处理Qt资源文件" class="headerlink" title="12.3 自动处理Qt资源文件"></a>12.3 自动处理Qt资源文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_AUTORCC <span class="keyword">ON</span>)</span><br></pre></td></tr></table></figure><p>启用了CMake的自动RCC支持。RCC是Qt的资源编译器，用于将<code>.qrc</code>文件（Qt资源集合文件）编译成二进制格式，这些二进制资源可以在Qt应用程序中动态加载。当<code>CMAKE_AUTORCC</code>被设置为ON时，CMake会自动检测项目中的<code>.qrc</code>文件，并使用RCC工具将其编译成资源文件，然后将这些资源文件添加到构建过程中。这简化了管理Qt项目中资源文件的过程。</p><p><strong>示例：</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(Master VERSION <span class="number">0.1</span> LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Qt6 <span class="number">6.5</span> REQUIRED COMPONENTS Quick)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOUIC <span class="keyword">ON</span>) <span class="comment"># 自动处理.ui文件</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>) <span class="comment"># 自动处理继承QObject的类</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTORCC <span class="keyword">ON</span>) <span class="comment"># 自动处理Qt资源文件</span></span><br><span class="line"></span><br><span class="line">qt_add_executable(app</span><br><span class="line">    main.cpp</span><br><span class="line">    res.qrc</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app</span><br><span class="line">    PRIVATE Qt6::Quick</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="13-拷贝文件"><a href="#13-拷贝文件" class="headerlink" title="13. 拷贝文件"></a>13. 拷贝文件</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把需要拷贝的资源路径都放到ASSERS里</span></span><br><span class="line"><span class="keyword">file</span>(GLOB ASSETS <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把ASSETS指代的目录集合的内容都拷贝到可执行文件目录下</span></span><br><span class="line"><span class="keyword">file</span>(COPY <span class="variable">$&#123;ASSETS&#125;</span> DESTINATION <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="14-预编译宏"><a href="#14-预编译宏" class="headerlink" title="14. 预编译宏"></a>14. 预编译宏</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 往项目中加入一个全局的预编译宏</span></span><br><span class="line"><span class="keyword">add_definitions</span>(-DDEBUG)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CMake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt使用OpenGL</title>
      <link href="/qt/opengl-config/"/>
      <url>/qt/opengl-config/</url>
      
        <content type="html"><![CDATA[<h3 id="1-添加opengl模块"><a href="#1-添加opengl模块" class="headerlink" title="1. 添加opengl模块"></a>1. 添加opengl模块</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT += openglwidgets</span><br></pre></td></tr></table></figure><h3 id="2-创建OpenGL-Widget"><a href="#2-创建OpenGL-Widget" class="headerlink" title="2. 创建OpenGL Widget"></a>2. 创建OpenGL Widget</h3><div class="note blue flat"><p>需要继承QOpenGLWidget和QOpenGLFunctions_4_5_Core类和重写虚函数。</p><p>​virtual void initializeGL();<br>​    virtual void resizeGL(int w, int h);<br>​    virtual void paintGL();</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TESTOPENGLWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TESTOPENGLWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QOpenGLWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QOpenGLFunctions_4_5_Core&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestOpenGLWidget</span> : <span class="keyword">public</span> QOpenGLWidget, QOpenGLFunctions_4_5_Core</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">        None, Rect, Circle, Triangle</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">TestOpenGLWidget</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">TestOpenGLWidget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">initializeGL</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">resizeGL</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">paintGL</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TESTOPENGLWIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-实现OpenGL函数"><a href="#3-实现OpenGL函数" class="headerlink" title="3. 实现OpenGL函数"></a>3. 实现OpenGL函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;testopenglwidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> VBO, VAO, EBO;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> shaderProgram;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> vertices[] = &#123;</span><br><span class="line">    <span class="number">-0.5f</span>,  <span class="number">-0.5f</span>,  <span class="number">0.0f</span>,</span><br><span class="line">    <span class="number">0.5f</span>,   <span class="number">-0.5f</span>,  <span class="number">0.0f</span>,</span><br><span class="line">    <span class="number">0.0f</span>,   <span class="number">0.5f</span>,   <span class="number">0.0f</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> indices[] = &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,    <span class="comment">// first triangle</span></span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// second triangle</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* vertexShaderSource = <span class="string">&quot;#version 450 core\n&quot;</span></span><br><span class="line">                                 <span class="string">&quot;layout (location = 0) in vec3 aPos;\n&quot;</span></span><br><span class="line">                                 <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">                                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                                 <span class="string">&quot;gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n&quot;</span></span><br><span class="line">                                 <span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* fragmentShaderSource = <span class="string">&quot;#version 450 core\n&quot;</span></span><br><span class="line">                                   <span class="string">&quot;out vec4 FragColor;\n&quot;</span></span><br><span class="line">                                   <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">                                   <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                                   <span class="string">&quot;FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n&quot;</span></span><br><span class="line">                                   <span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">TestOpenGLWidget::<span class="built_in">TestOpenGLWidget</span>(QWidget *parent)</span><br><span class="line">    : QOpenGLWidget&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TestOpenGLWidget::~<span class="built_in">TestOpenGLWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">makeCurrent</span>();</span><br><span class="line">    <span class="built_in">glDeleteBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">    <span class="built_in">glDeleteBuffers</span>(<span class="number">1</span>, &amp;EBO);</span><br><span class="line">    <span class="built_in">glDeleteVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">    <span class="built_in">doneCurrent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestOpenGLWidget::initializeGL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化OpenGL函数</span></span><br><span class="line">    <span class="built_in">initializeOpenGLFunctions</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明的顶点属性的上限</span></span><br><span class="line">    <span class="type">int</span> nrAttributes;</span><br><span class="line">    <span class="built_in">glGetIntegerv</span>(GL_MAX_VERTEX_ATTRIBS, &amp;nrAttributes);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;-------------------:&quot;</span> &lt;&lt; nrAttributes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建VBO和VAO对象 并赋予ID</span></span><br><span class="line">    <span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">    <span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">    <span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;EBO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定VBO和VAO对象</span></span><br><span class="line">    <span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">    <span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class="line">    <span class="built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为当前绑定到target的缓冲区对象创建一个新的数据存储。</span></span><br><span class="line">    <span class="comment">// 如果data不为NULL 则使用来自此指针的数据初始化数据存储。</span></span><br><span class="line">    <span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line">    <span class="built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class="built_in">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告知显卡如何解析缓冲里的属性值</span></span><br><span class="line">    <span class="comment">// position attribute</span></span><br><span class="line">    <span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in">sizeof</span>(<span class="type">float</span>), (<span class="type">void</span>*)<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 开启VAO管理的第一个属性值</span></span><br><span class="line">    <span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 顶点着色器</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> vertexShader = <span class="built_in">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class="line">    <span class="built_in">glShaderSource</span>(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">glCompileShader</span>(vertexShader);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> success;<span class="type">char</span> infoLog[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">glGetShaderiv</span>(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span>(!success) &#123;</span><br><span class="line">        <span class="built_in">glGetShaderInfoLog</span>(vertexShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 片段着色器</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> fragmentShader = <span class="built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class="line">    <span class="built_in">glShaderSource</span>(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">glCompileShader</span>(fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glGetShaderiv</span>(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span>(!success) &#123;</span><br><span class="line">        <span class="built_in">glGetShaderInfoLog</span>(fragmentShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;ERROR::SHADER::FRAGEMENT::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shaderProgram = <span class="built_in">glCreateProgram</span>();</span><br><span class="line">    <span class="built_in">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class="line">    <span class="built_in">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class="line">    <span class="built_in">glLinkProgram</span>(shaderProgram);</span><br><span class="line">    <span class="built_in">glGetShaderiv</span>(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span>(!success) &#123;</span><br><span class="line">        <span class="built_in">glGetShaderInfoLog</span>(shaderProgram, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\n&quot;</span> &lt;&lt; infoLog;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">glDeleteShader</span>(vertexShader);</span><br><span class="line">    <span class="built_in">glDeleteShader</span>(fragmentShader);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestOpenGLWidget::resizeGL</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_UNUSED</span>(w);</span><br><span class="line">    <span class="built_in">Q_UNUSED</span>(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestOpenGLWidget::paintGL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glUseProgram</span>(shaderProgram);</span><br><span class="line">    <span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">    <span class="built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频裁剪</title>
      <link href="/ffmpeg/video-fliter/"/>
      <url>/ffmpeg/video-fliter/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i source.mkv -vf crop=1920:800:0:140,scale=-2:480 -c:v libx265 -c:v libmp3lame -y ok.mkv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ffmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表循环布局-动画实现</title>
      <link href="/kanzi/loop-layout/"/>
      <url>/kanzi/loop-layout/</url>
      
        <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=112765473655486&bvid=BV1VcasewEHU&cid=500001611593658&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h3 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1. 创建节点"></a>1. 创建节点</h3><p>使用堆栈布局创建7个节点</p><p><img src="/kanzi/loop-layout/image-20240711111027448.png" alt="image-20240711111027448"></p><h3 id="2-添加状态机"><a href="#2-添加状态机" class="headerlink" title="2. 添加状态机"></a>2. 添加状态机</h3><div class="note blue flat"><p>通过控制Y轴的移动来显示不同的驾驶模式</p></div><p><img src="/kanzi/loop-layout/image-20240711104831952.png" alt="image-20240711104831952"> <img src="/kanzi/loop-layout/image-20240711104842831.png" alt="image-20240711104842831"> </p><p><img src="/kanzi/loop-layout/image-20240711104848594.png" alt="image-20240711104848594"></p><h3 id="3-创建动画"><a href="#3-创建动画" class="headerlink" title="3. 创建动画"></a>3. 创建动画</h3><p><img src="/kanzi/loop-layout/image-20240711105429211.png" alt="image-20240711105429211"></p><div class="note blue flat"><p>State_0-State_3采用线性动画。</p></div><p><img src="/kanzi/loop-layout/image-20240711105511072.png" alt="image-20240711105511072"></p><div class="note blue flat"><p>State_3-State_0采用自定义动画。</p></div><p><img src="/kanzi/loop-layout/image-20240711105626346.png" alt="image-20240711105626346"></p><p><img src="/kanzi/loop-layout/image-20240711110113302.png" alt="image-20240711110113302"></p>]]></content>
      
      
      <categories>
          
          <category> kanzi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kanzi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>extern</title>
      <link href="/cplusplus/extern/"/>
      <url>/cplusplus/extern/</url>
      
        <content type="html"><![CDATA[<h1 id="extern-关键词的运用"><a href="#extern-关键词的运用" class="headerlink" title="extern 关键词的运用"></a><code>extern</code> 关键词的运用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>extern</code> 关键字在C和C++语言中主要用于声明变量或函数是在其他文件或本文件的其他位置定义的。这允许程序的不同部分共享变量和函数的定义。  </p><h2 id="在C语言中的运用"><a href="#在C语言中的运用" class="headerlink" title="在C语言中的运用"></a>在C语言中的运用</h2><h3 id="声明全局变量"><a href="#声明全局变量" class="headerlink" title="声明全局变量"></a>声明全局变量</h3><p>当你在一个源文件中定义了一个全局变量，并希望在另一个源文件中访问它时，你需要在那个源文件中使用 <code>extern</code> 关键字来声明这个变量。  </p><p><strong>globals.c</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局变量  </span></span><br><span class="line"><span class="type">int</span> globalVar = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 声明全局变量，表示它在其他地方定义  </span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> globalVar;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;全局变量的值为: %d\n&quot;</span>, globalVar);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><p>虽然对于函数来说，<code>extern</code> 关键字不是必需的（因为函数默认就是全局的，并且默认就是 <code>extern</code> 的），但它仍然可以用来显式地声明一个函数是在其他地方定义的。</p><p><strong>functions.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><strong>functions.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;functions.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="comment">// 函数实现  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from myFunction!\n&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.c（使用函数）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;functions.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    myFunction(); <span class="comment">// 调用函数  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在C-中的运用"><a href="#在C-中的运用" class="headerlink" title="在C++中的运用"></a>在C++中的运用</h2><h3 id="声明全局变量-1"><a href="#声明全局变量-1" class="headerlink" title="声明全局变量"></a>声明全局变量</h3><p>C++中全局变量的声明方式与C相同。</p><h3 id="声明函数-1"><a href="#声明函数-1" class="headerlink" title="声明函数"></a>声明函数</h3><p>C++中函数的声明方式与C也类似，但<code>extern</code>的使用更加侧重于与C语言的互操作性。</p><h3 id="与C语言代码的互操作性"><a href="#与C语言代码的互操作性" class="headerlink" title="与C语言代码的互操作性"></a>与C语言代码的互操作性</h3><p>当C++代码需要调用C语言编写的函数时，为了防止C++的名称修饰（Name Mangling）机制影响链接，可以使用 <code>extern &quot;C&quot;</code>。</p><p><strong>c_functions.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus  </span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">cFunction</span><span class="params">()</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;c_functions.h&quot;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;  </span><br><span class="line">    <span class="comment">// 这里通常不需要再次使用extern &quot;C&quot;，除非在C++文件中直接包含C代码  </span></span><br><span class="line">    <span class="comment">// 但为了示例的完整性，这里展示其用法  </span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cFunction</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="built_in">cFunction</span>(); <span class="comment">// 调用C语言编写的函数  </span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Back in C++\n&quot;</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，在实际使用中，<code>extern &quot;C&quot;</code> 通常放在头文件中，以便在C++和C的源文件中都能正确地处理链接。上面的 <code>c_functions.h</code> 头文件展示了如何在C和C++之间共享函数声明的典型做法。在C++源文件中，通常不需要再次使用 <code>extern &quot;C&quot;</code> 来声明已经在头文件中用 <code>extern &quot;C&quot;</code> 包裹的函数，除非有特殊情况。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS配置Qt环境</title>
      <link href="/qt/qt-vs/"/>
      <url>/qt/qt-vs/</url>
      
        <content type="html"><![CDATA[<h3 id="1-将Qt中的cmake路径配置到系统变量中"><a href="#1-将Qt中的cmake路径配置到系统变量中" class="headerlink" title="1. 将Qt中的cmake路径配置到系统变量中"></a>1. 将Qt中的cmake路径配置到系统变量中</h3><p><img src="/qt/qt-vs/Snipaste_2024-07-03_16-26-53.png" alt="Snipaste_2024-07-03_16-26-53"></p><p>新建一个名为<code>CMAKE_PREFIX_PATH</code>的环境变量</p><p><img src="/qt/qt-vs/Snipaste_2024-07-03_16-30-36.png" alt="Snipaste_2024-07-03_16-30-36"></p><h3 id="2-在Visual-Studio中安装扩展"><a href="#2-在Visual-Studio中安装扩展" class="headerlink" title="2. 在Visual Studio中安装扩展"></a>2. 在Visual Studio中安装扩展</h3><p>点击扩展–管理扩展</p><p><img src="/qt/qt-vs/Snipaste_2024-07-03_16-35-22.png" alt="Snipaste_2024-07-03_16-35-22"></p><p>在搜索框中输入Qt，安装前两个</p><p><img src="/qt/qt-vs/Snipaste_2024-07-03_16-39-07.png" alt="Snipaste_2024-07-03_16-39-07"></p><mark class="hl-label red">重启VS</mark> <h3 id="3-配置使用的Qt版本"><a href="#3-配置使用的Qt版本" class="headerlink" title="3.配置使用的Qt版本"></a>3.配置使用的Qt版本</h3><p><img src="/qt/qt-vs/image-20240704090502656.png" alt="image-20240704090502656"></p><p><img src="/qt/qt-vs/image-20240704090521278.png" alt="image-20240704090521278"></p><p><img src="/qt/qt-vs/image-20240704090544306.png" alt="image-20240704090544306"></p><p><img src="/qt/qt-vs/image-20240709095028268.png" alt="image-20240709095028268"></p><p><img src="/qt/qt-vs/image-20240704090559077.png" alt="image-20240704090559077"></p><h3 id="4-打开控制台窗口"><a href="#4-打开控制台窗口" class="headerlink" title="4. 打开控制台窗口"></a>4. 打开控制台窗口</h3><div class="note blue flat"><p>点击<strong>Properties&gt;Linker&gt;System&gt;SubSystem</strong>，将<strong>Windows (&#x2F;SUBSYSTEM:WINDOWS)<strong>改为</strong>Console (&#x2F;SUBSYSTEM:CONSOLE)</strong></p></div><p><img src="/qt/qt-vs/image-20240709094610893.png" alt="image-20240709094610893"></p><p><img src="/qt/qt-vs/image-20240709094821093.png" alt="image-20240709094821093"></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGraphicsView框架</title>
      <link href="/qt/qgraphicsview/"/>
      <url>/qt/qgraphicsview/</url>
      
        <content type="html"><![CDATA[<div class="note blue flat"><p>Qt开发中，绘图继承QWidget通过重写paintEvent虚函数来处理，但在绘制大量图形或实现复杂的动画效果时可能会遇到性能瓶颈。</p><p>QGraphicsView框架是Qt GUI库中的一个重要组成部分，它实现了模型-视图结构的图形管理，特别适用于处理和显示大量图元（如文本、形状、图片等）的复杂图形场景。</p></div><h3 id="一、框架概述"><a href="#一、框架概述" class="headerlink" title="一、框架概述"></a>一、框架概述</h3><p>QGraphicsView框架提供2D图形项目交互界面开发。</p><p>QGraphicsView框架主要包括三个核心类：<code>QGraphicsScene</code>（场景）、<code>QGraphicsView</code>（视图）和<code>QGraphicsItem</code>（图元）。</p><ul><li><strong>QGraphicsScene</strong>：作为图元的容器，负责存储和管理所有的图形项。它提供了操作接口、事件传递和图元状态管理等功能，但<mark class="hl-label red">不可见</mark> ，需要通过与之相连的<code>QGraphicsView</code>来显示。</li><li><strong>QGraphicsView</strong>：提供了一个可视的窗口部件，用于显示<code>QGraphicsScene</code>中的内容。它支持丰富的交互功能，如平移、缩放、旋转等，并允许用户通过鼠标和键盘与场景中的图元进行交互，支持OpenGL渲染。</li><li><strong>QGraphicsItem</strong>：是场景中各个图元的基类，Qt提供了多种标准图元类（如矩形、椭圆、文本等），用户也可以继承<code>QGraphicsItem</code>来实现自定义图元。</li></ul><h3 id="二、QGraphicsView的关键特性"><a href="#二、QGraphicsView的关键特性" class="headerlink" title="二、QGraphicsView的关键特性"></a>二、QGraphicsView的关键特性</h3><ol><li>视图与场景分离：<ul><li><code>QGraphicsView</code>与<code>QGraphicsScene</code>分离，允许一个场景被多个视图观察，每个视图都可以有自己的视角和变换。</li></ul></li><li>视口与坐标系统：<ul><li><code>QGraphicsView</code>内部有一个视口，映射的是场景的部分或全部内容。</li><li>视口和场景有各自的坐标系统，但可以通过变换矩阵相互转换。</li></ul></li><li>交互功能：<ul><li>支持平移、缩放、旋转等交互操作，用户可以通过鼠标和键盘来改变视图的显示。</li><li>可以通过<code>setDragMode()</code>方法设置不同的交互模式，如<code>NoDrag</code>（无拖动）、<code>ScrollHandDrag</code>（手型拖动）和<code>RubberBandDrag</code>（橡皮筋拖动）。</li></ul></li><li>滚动条：<ul><li>可以显示水平和垂直滚动条，以便浏览超出视口大小的场景内容。</li></ul></li><li>抗锯齿和优化：<ul><li>支持OpenGL加速和抗锯齿，以提高渲染质量和性能。</li><li>可以通过<code>setRenderHint()</code>方法设置渲染提示，如启用边缘的反锯齿绘制（<code>QPainter::Antialiasing</code>）。</li></ul></li><li>视图变换：<ul><li>支持通过<code>QTransform</code>类进行复杂的仿射变换，包括平移、缩放、旋转和倾斜。</li><li>可以通过<code>setTransform()</code>方法应用到视图上。</li></ul></li><li>缓存模式：<ul><li>提供了多种缓存模式（<code>CacheModeFlag</code>），以优化复杂场景的重绘效率。</li></ul></li><li>事件处理：<ul><li>可以处理各种事件，如鼠标事件、键盘事件和滚轮事件。</li><li>可以通过重写<code>QGraphicsView</code>的事件处理函数来自定义这些行为。</li></ul></li></ol><h3 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h3><p>QGraphicsView框架特别适用于需要动态更新、可交互的2D图形化应用程序，如图表绘制、流程图编辑器、游戏地图显示等。通过结合使用<code>QGraphicsScene</code>和<code>QGraphicsItem</code>，开发者可以创建出高度定制化、性能优良的图形用户界面组件。</p><h3 id="四、示例代码"><a href="#四、示例代码" class="headerlink" title="四、示例代码"></a>四、示例代码</h3><p>以下是一个简单的示例，展示如何创建一个包含矩形图形项的场景，并将其显示在一个<code>QGraphicsView</code>控件中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;  </span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 创建一个图形场景  </span></span><br><span class="line">    QGraphicsScene *scene = <span class="keyword">new</span> <span class="built_in">QGraphicsScene</span>();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 在场景中添加一个矩形图形项  </span></span><br><span class="line">    QGraphicsRectItem *rectItem = scene-&gt;<span class="built_in">addRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);  </span><br><span class="line">    rectItem-&gt;<span class="built_in">setBrush</span>(Qt::blue); <span class="comment">// 设置填充颜色  </span></span><br><span class="line">    rectItem-&gt;<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(Qt::black)); <span class="comment">// 设置边框颜色  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 创建一个图形视图并设置场景  </span></span><br><span class="line">    QGraphicsView *view = <span class="keyword">new</span> <span class="built_in">QGraphicsView</span>();  </span><br><span class="line">    view-&gt;<span class="built_in">setScene</span>(scene);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 设置视图的一些基本属性  </span></span><br><span class="line">    view-&gt;<span class="built_in">setRenderHint</span>(QPainter::Antialiasing); <span class="comment">// 启用抗锯齿  </span></span><br><span class="line">    view-&gt;<span class="built_in">setDragMode</span>(QGraphicsView::ScrollHandDrag); <span class="comment">// 允许拖拽视图进行平移  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 显示视图到窗口  </span></span><br><span class="line">    QMainWindow window;  </span><br><span class="line">    window.<span class="built_in">setCentralWidget</span>(view);  </span><br><span class="line">    window.<span class="built_in">show</span>();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> app.<span class="built_in">exec</span>();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>QGraphicsView框架是Qt中用于构建复杂图形用户界面的强大工具，它通过模型-视图结构实现了对大量图元的高效管理和显示。通过丰富的交互功能和灵活的变换能力，开发者可以轻松地创建出动态、可交互的2D图形化应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmd命令及配置</title>
      <link href="/other/unable-cmd/"/>
      <url>/other/unable-cmd/</url>
      
        <content type="html"><![CDATA[<h3 id="1-cmd无法识别该命令"><a href="#1-cmd无法识别该命令" class="headerlink" title="1. cmd无法识别该命令"></a>1. cmd无法识别该命令</h3><h4 id="1-1-问题详情"><a href="#1-1-问题详情" class="headerlink" title="1.1 问题详情"></a>1.1 问题详情</h4><p><img src="/other/unable-cmd/image-20240701230524439.png" alt="image-20240701230524439"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS D:\code\flutter\xmshop&gt; get init</span><br><span class="line">get : 无法将“get”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ get init</span><br><span class="line">+ ~~~</span><br><span class="line">    + CategoryInfo          : ObjectNotFound: (get:String) [], CommandNotFoundException</span><br><span class="line">    + FullyQualifiedErrorId : CommandNotFoundException</span><br></pre></td></tr></table></figure><h4 id="1-2-解决措施"><a href="#1-2-解决措施" class="headerlink" title="1.2. 解决措施"></a>1.2. 解决措施</h4><div class="note blue flat"><p>以管理员身份打开Windows PowerShell</p><p>输入 set-ExecutionPolicy RemoteSigned 回车</p><p>输入 A 回车</p><p>再输入get-ExecutionPolicy,回车 出现RemoteSigned 即为成功</p></div><p><img src="/other/unable-cmd/image-20240701232314153.png" alt="image-20240701232314153"></p><h4 id="1-3-重启电脑"><a href="#1-3-重启电脑" class="headerlink" title="1.3. 重启电脑"></a>1.3. 重启电脑</h4><h3 id="2-一些基本命令"><a href="#2-一些基本命令" class="headerlink" title="2. 一些基本命令"></a>2. 一些基本命令</h3><p>测试端口通不通：<code>telnet ip port</code></p><p>查看进程地端口号：<code>netstat -ano | findstr &quot;PID&quot;</code></p><p>清空界面：<code>cls</code></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get_cli配置</title>
      <link href="/flutter/get-cli/"/>
      <url>/flutter/get-cli/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装get-cli"><a href="#1-安装get-cli" class="headerlink" title="1. 安装get_cli"></a>1. 安装get_cli</h1><h2 id="1-1-命令行安装"><a href="#1-1-命令行安装" class="headerlink" title="1.1 命令行安装"></a>1.1 命令行安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub global activate get_cli</span><br></pre></td></tr></table></figure><h2 id="1-2-get-cli源代码存在问题"><a href="#1-2-get-cli源代码存在问题" class="headerlink" title="1.2 get_cli源代码存在问题"></a>1.2 get_cli源代码存在问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Failed to build get_cli:get:</span><br><span class="line">AppData/Local/Pub/Cache/hosted/pub.dev/dcli-2.3.0/lib/src/util/wait_for_ex.dart:38:17: Error: Method not found: <span class="string">&#x27;waitFor&#x27;</span>.</span><br><span class="line">    value = cli.waitFor&lt;T&gt;(wrapped);</span><br><span class="line">                ^^^^^^^</span><br></pre></td></tr></table></figure><p>get_cli 源代码存在问题，更换一个源代码的镜像即可解决该问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub global activate --<span class="built_in">source</span>=git https://github.com/inyong1/get_cli.git</span><br></pre></td></tr></table></figure><p><img src="/flutter/get-cli/image-20240701222022009.png" alt="image-20240701222022009"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Building package executables... (6.7s)</span><br><span class="line">Built get_cli:get.</span><br><span class="line">Installed executables get and getx.</span><br><span class="line">Warning: Pub installs executables into C:\Users\Administrator\AppData\Local\Pub\Cache\bin, <span class="built_in">which</span> is not on your path.</span><br><span class="line">You can fix that by adding that directory to your system<span class="string">&#x27;s &quot;Path&quot; environment variable.</span></span><br><span class="line"><span class="string">A web search for &quot;configure windows path&quot; will show you how.</span></span><br><span class="line"><span class="string">Activated get_cli 1.8.4 from Git repository &quot;https://github.com/inyong1/get_cli.git&quot;.</span></span><br></pre></td></tr></table></figure><h2 id="1-3-配置环境变量"><a href="#1-3-配置环境变量" class="headerlink" title="1.3 配置环境变量"></a>1.3 配置环境变量</h2><p>下面路径添加到Path环境变量里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Local\Pub\Cache\bin</span><br></pre></td></tr></table></figure><p><img src="/flutter/get-cli/image-20240701222232201.png" alt="image-20240701222232201"></p><h1 id="2-flutter-Getx-搭建项目架构"><a href="#2-flutter-Getx-搭建项目架构" class="headerlink" title="2. flutter+Getx 搭建项目架构"></a>2. flutter+Getx 搭建项目架构</h1><h2 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h2><div class="note blue flat"><p>android 里面推荐使用 android studio 创建，创建的时候指定好应用包名</p></div><ul><li>选择一个flutter的SDK</li></ul><p><img src="/flutter/get-cli/image-20240701224625907.png" alt="image-20240701224625907"></p><p><img src="/flutter/get-cli/image-20240701225106328.png" alt="image-20240701225106328"></p><h2 id="2-2-使用get-cli构建项目"><a href="#2-2-使用get-cli构建项目" class="headerlink" title="2.2 使用get_cli构建项目"></a>2.2 使用get_cli构建项目</h2><h3 id="2-2-1-输入get-init初始化项目"><a href="#2-2-1-输入get-init初始化项目" class="headerlink" title="2.2.1 输入get init初始化项目"></a>2.2.1 输入<code>get init</code>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PS D:\code\flutter\xmshop&gt; get init</span><br><span class="line"></span><br><span class="line">  1) GetX Pattern (by Kauê)</span><br><span class="line">  2) CLEAN (by Arktekko)</span><br><span class="line">Which architecture <span class="keyword">do</span> you want to use? [1] 1</span><br><span class="line"></span><br><span class="line">  1) 是的!</span><br><span class="line">  2) 不</span><br><span class="line">你的 lib 文件夹不是空的。你确定要覆盖你的应用吗？</span><br><span class="line"> 警告:操作不可逆 [1] 1</span><br><span class="line">✓  <span class="string">&#x27;Package: get 已安装！</span></span><br><span class="line"><span class="string">✓  文件: main.dart 创建成功，路径: lib\\main.dart</span></span><br><span class="line"><span class="string">✓  文件: home_controller.dart 创建成功，路径: lib\app\modules\home\\controllers\\home_controller.dart</span></span><br><span class="line"><span class="string">✓  文件: home_view.dart 创建成功，路径: lib\app\modules\home\\views\\home_view.dart</span></span><br><span class="line"><span class="string">✓  文件: home_binding.dart 创建成功，路径: lib\app\modules\home\\bindings\\home_binding.dart</span></span><br><span class="line"><span class="string">✓  文件: app_routes.dart 创建成功，路径: lib\\app\\routes\\app_routes.dart</span></span><br><span class="line"><span class="string">✓  文件: app_pages.dart 创建成功，路径: lib\\app\\routes\\app_pages.dart</span></span><br><span class="line"><span class="string">✓  home route 创建成功.</span></span><br><span class="line"><span class="string">✓  Home page 创建成功.</span></span><br><span class="line"><span class="string">✓  GetX 结构生成成功。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Running `flutter pub get` …</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ flutter pub get</span></span><br><span class="line"><span class="string">Flutter assets will be downloaded from https://mirrors.tuna.tsinghua.edu.cn/flutter. Make sure you trust this source!</span></span><br><span class="line"><span class="string">Resolving dependencies...</span></span><br><span class="line"><span class="string">Downloading packages...</span></span><br><span class="line"><span class="string">  collection 1.18.0 (1.19.0 available)</span></span><br><span class="line"><span class="string">  flutter_lints 3.0.2 (4.0.0 available)</span></span><br><span class="line"><span class="string">+ get 4.6.6</span></span><br><span class="line"><span class="string">  leak_tracker 10.0.4 (10.0.5 available)</span></span><br><span class="line"><span class="string">  leak_tracker_flutter_testing 3.0.3 (3.0.5 available)</span></span><br><span class="line"><span class="string">  lints 3.0.0 (4.0.0 available)</span></span><br><span class="line"><span class="string">  material_color_utilities 0.8.0 (0.12.0 available)</span></span><br><span class="line"><span class="string">  meta 1.12.0 (1.15.0 available)</span></span><br><span class="line"><span class="string">  test_api 0.7.0 (0.7.2 available)</span></span><br><span class="line"><span class="string">  vm_service 14.2.1 (14.2.4 available)</span></span><br><span class="line"><span class="string">Changed 1 dependency!</span></span><br><span class="line"><span class="string">9 packages have newer versions incompatible with dependency constraints.</span></span><br><span class="line"><span class="string">Try `flutter pub outdated` for more information.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Time: 218329 Milliseconds</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-创建-tabs-home-category-service-cart-user-serach-对应的-page"><a href="#2-2-2-创建-tabs-home-category-service-cart-user-serach-对应的-page" class="headerlink" title="2.2.2 创建 tabs home category service cart user serach 对应的 page"></a>2.2.2 创建 tabs home category service cart user serach 对应的 page</h3><div class="note blue flat"><p>使用get create page:xxx</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PS D:\code\flutter\xmshop&gt; get create page:tabs</span><br><span class="line">ler.dart</span><br><span class="line">✓  文件: tabs_view.dart 创建成功，路径: lib\app\modules\tabs\\views\\tabs_view.dart          ler.dart</span><br><span class="line">✓  文件: tabs_binding.dart 创建成功，路径: lib\app\modules\tabs\\bindings\\tabs_binding.dart </span><br><span class="line">✓  tabs route 创建成功.</span><br><span class="line">✓  Tabs page 创建成功.</span><br><span class="line"></span><br><span class="line">Time: 673 Milliseconds</span><br><span class="line"></span><br><span class="line">PS D:\code\flutter\xmshop&gt; get create page:category</span><br><span class="line">gory_controller.dart</span><br><span class="line">✓  文件: category_view.dart 创建成功，路径: lib\app\modules\category\\views\\category_view.dart</span><br><span class="line">✓  文件: category_binding.dart 创建成功，路径: lib\app\modules\category\\bindings\\category_binding.dart</span><br><span class="line">✓  category route 创建成功.</span><br><span class="line">✓  Category page 创建成功.</span><br><span class="line"></span><br><span class="line">Time: 320 Milliseconds</span><br><span class="line">PS D:\code\flutter\xmshop&gt; get create page:give</span><br><span class="line">✓  文件: give_controller.dart 创建成功，路径: lib\app\modules\give\\controllers\\give_controller.dart</span><br><span class="line">✓  文件: give_view.dart 创建成功，路径: lib\app\modules\give\\views\\give_view.dart</span><br><span class="line">✓  文件: give_binding.dart 创建成功，路径: lib\app\modules\give\\bindings\\give_binding.dart</span><br><span class="line">✓  give route 创建成功.</span><br><span class="line">✓  Give page 创建成功.</span><br><span class="line"></span><br><span class="line">Time: 329 Milliseconds</span><br><span class="line"></span><br><span class="line">PS D:\code\flutter\xmshop&gt; get create page:cart</span><br><span class="line">✓  文件: cart_controller.dart 创建成功，路径: lib\app\modules\cart\\controllers\\cart_controller.dart</span><br><span class="line">✓  文件: cart_view.dart 创建成功，路径: lib\app\modules\cart\\views\\cart_view.dart</span><br><span class="line">✓  文件: cart_binding.dart 创建成功，路径: lib\app\modules\cart\\bindings\\cart_binding.dart</span><br><span class="line">✓  cart route 创建成功.</span><br><span class="line">✓  Cart page 创建成功.</span><br><span class="line"></span><br><span class="line">Time: 342 Milliseconds</span><br><span class="line"></span><br><span class="line">PS D:\code\flutter\xmshop&gt; get create page:user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">✓  文件: user_controller.dart 创建成功，路径: lib\app\modules\user\\controllers\\user_controller.dart</span><br><span class="line">✓  文件: user_view.dart 创建成功，路径: lib\app\modules\user\\views\\user_view.dart</span><br><span class="line">✓  文件: user_binding.dart 创建成功，路径: lib\app\modules\user\\bindings\\user_binding.dart</span><br><span class="line">✓  user route 创建成功.</span><br><span class="line">✓  User page 创建成功.</span><br><span class="line"></span><br><span class="line">Time: 332 Milliseconds</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dart-primer</title>
      <link href="/flutter/dart-primer/"/>
      <url>/flutter/dart-primer/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Dart介绍"><a href="#1-Dart介绍" class="headerlink" title="1. Dart介绍"></a>1. Dart介绍</h1><div class="note blue flat"><p>Dart是由谷歌开发的计算机编程语言，它可以被用于Web、服务器、移动应用和物联网等领域的开发。</p><p>Dart诞生于2011年，号称要取代JavaScript。但是过去几年中一直不温不火。直到Flutter的出现，现在被人们重新重视。</p></div><ul><li>官网：<a href="https://dart.dev/">Dart programming language | Dart</a></li><li>国内：<a href="https://dart.cn/">Dart 编程语言主页 | Dart 中文文档 | Dart</a></li></ul><h1 id="2-VSCode安装dart、Code-Runner插件"><a href="#2-VSCode安装dart、Code-Runner插件" class="headerlink" title="2. VSCode安装dart、Code Runner插件"></a>2. VSCode安装dart、Code Runner插件</h1><p><img src="/flutter/dart-primer/image-20240625234206990.png" alt="image-20240625234206990"></p><p><img src="/flutter/dart-primer/image-20240625234334828.png" alt="image-20240625234334828"></p><h1 id="3-运行第一个“Hello-Dart”"><a href="#3-运行第一个“Hello-Dart”" class="headerlink" title="3. 运行第一个“Hello Dart”"></a>3. 运行第一个“Hello Dart”</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello Dart&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/flutter/dart-primer/image-20240625234001687.png" alt="image-20240625234001687"></p><h1 id="4-Dart中的变量和常量"><a href="#4-Dart中的变量和常量" class="headerlink" title="4. Dart中的变量和常量"></a>4. Dart中的变量和常量</h1><h2 id="4-1变量"><a href="#4-1变量" class="headerlink" title="4.1变量"></a>4.1变量</h2><div class="note blue flat"><p>dart是一个强大的脚本类型语言，可以不预先定义变量类型，自动会类型推导</p><p>dart中定义的变量可以通过var关键字也通过类型来声明变量</p></div><h2 id="4-2-常量-final和const修饰符"><a href="#4-2-常量-final和const修饰符" class="headerlink" title="4.2 常量(final和const修饰符)"></a>4.2 常量(final和const修饰符)</h2><div class="note blue flat"><p>const 值不变 一开始就得赋值。</p><p>final 可以开始不赋值 只能赋一次；final 不仅有const的编译时常量的特性，最重要的它是运行时常量，且final是惰性初始化，即在运行时第一次使用前才开始初始化。</p></div><h2 id="4-3-获取当前时间"><a href="#4-3-获取当前时间" class="headerlink" title="4.3 获取当前时间"></a>4.3 获取当前时间</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">final</span> a = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Dart中支持的数据类型"><a href="#5-Dart中支持的数据类型" class="headerlink" title="5. Dart中支持的数据类型"></a>5. Dart中支持的数据类型</h1><div class="note blue flat"><p>Number(数值):intdouble</p><p>String(字符串):String</p><p>Booleans(布尔):bool</p><p>List(数组):在Dart中数组是列表对象，所以大多数人称它们为列表</p><p>Map(字典):Map是一个键值对 相关的对象。键和值可以是任何类型的对象。</p></div><h2 id="5-1-字符串"><a href="#5-1-字符串" class="headerlink" title="5.1 字符串"></a>5.1 字符串</h2><h3 id="5-1-1-多行字符串"><a href="#5-1-1-多行字符串" class="headerlink" title="5.1.1 多行字符串"></a>5.1.1 多行字符串</h3><div class="note blue flat"><p>使用三个单引号或者三个双引号</p></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">String</span> str = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">this is str</span></span><br><span class="line"><span class="string">    this is str</span></span><br><span class="line"><span class="string">  this is str</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/flutter/dart-primer/image-20240627001019232.png" alt="image-20240627001019232"></p><h3 id="5-1-2-字符串拼接"><a href="#5-1-2-字符串拼接" class="headerlink" title="5.1.2 字符串拼接"></a>5.1.2 字符串拼接</h3><div class="tabs" id="string"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="string-1">使用(+)</button><button type="button" class="tab " data-href="string-2">使用($)</button></ul><div class="tab-contents"><div class="tab-item-content active" id="string-1"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str1 = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line"><span class="built_in">String</span> str2 = <span class="string">&#x27;Dart&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(str1 + str2);</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="string-2"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str1 = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line"><span class="built_in">String</span> str2 = <span class="string">&#x27;Dart&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$str1</span> <span class="subst">$str2</span>&quot;</span>);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="5-2-List-数组-集合"><a href="#5-2-List-数组-集合" class="headerlink" title="5.2 List(数组&#x2F;集合)"></a>5.2 List(数组&#x2F;集合)</h2><div class="tabs" id="string"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="string-1">普通定义</button><button type="button" class="tab " data-href="string-2">指定类型</button><button type="button" class="tab " data-href="string-3">固定长度</button></ul><div class="tab-contents"><div class="tab-item-content active" id="string-1"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> l1 = [<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="keyword">true</span>];</span><br><span class="line">  <span class="built_in">print</span>(l1);</span><br><span class="line">  <span class="built_in">print</span>(l1.length);</span><br><span class="line">  <span class="built_in">print</span>(l1[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note blue flat"><p>输出为：</p><p>[Running] dart “d:\code\dart_-tutorial\01\03 List.dart”</p><p>[张三, 20, true]</p><p>3</p><p>张三</p></div></div><div class="tab-item-content" id="string-2"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l2 = &lt;<span class="built_in">String</span>&gt;[<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>];</span><br><span class="line"><span class="built_in">print</span>(l2);</span><br></pre></td></tr></table></figure><div class="note blue flat"><p>输出为：</p><p>[Running] dart “d:\code\dart_-tutorial\01\03 List.dart”</p><p>[张三, 李四]</p><p>[Done] exited with code&#x3D;0 in 0.336 seconds</p></div></div><div class="tab-item-content" id="string-3"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l3 = <span class="built_in">List</span>.filled(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">print</span>(l3);</span><br></pre></td></tr></table></figure><div class="note blue flat"><p>输出为：</p><p>[Running] dart “d:\code\dart_-tutorial\01\03 List.dart”</p><p>[张三, 李四]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>[Done] exited with code&#x3D;0 in 0.324 seconds</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="5-3-Map"><a href="#5-3-Map" class="headerlink" title="5.3 Map"></a>5.3 Map</h2><div class="tabs" id="map"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="map-1">普通定义</button><button type="button" class="tab " data-href="map-2">new Map()</button></ul><div class="tab-contents"><div class="tab-item-content active" id="map-1"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">20</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">print</span>(person);</span><br><span class="line">  <span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">  <span class="built_in">print</span>(person[<span class="string">&quot;age&quot;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="map-2"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">p[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">p[<span class="string">&quot;age&quot;</span>] = <span class="number">22</span>;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="5-4-is-关键词判断类型"><a href="#5-4-is-关键词判断类型" class="headerlink" title="5.4 is 关键词判断类型"></a>5.4 is 关键词判断类型</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是String类型&#x27;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">int</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;int&#x27;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;其他类型&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-类型转换"><a href="#5-5-类型转换" class="headerlink" title="5.5 类型转换"></a>5.5 类型转换</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Number与String类型之间的转换</span></span><br><span class="line">  <span class="comment">// Number类型转换成String类型 toString()</span></span><br><span class="line">  <span class="comment">// String类型转成Number类型 int.parse()</span></span><br><span class="line">  <span class="built_in">String</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">num</span> = <span class="built_in">int</span>.parse(str);</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">num</span> <span class="keyword">is</span> <span class="built_in">int</span>);</span><br><span class="line">  <span class="built_in">num</span> = <span class="number">12</span>;</span><br><span class="line">  str = <span class="built_in">num</span>.toString();</span><br><span class="line">  <span class="built_in">print</span>(str <span class="keyword">is</span> <span class="built_in">String</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt安装</title>
      <link href="/qt/qt-install/"/>
      <url>/qt/qt-install/</url>
      
        <content type="html"><![CDATA[<h2 id="1-在线安装包"><a href="#1-在线安装包" class="headerlink" title="1. 在线安装包"></a>1. 在线安装包</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/online_installers/</span></span><br></pre></td></tr></table></figure><p><img src="/qt/qt-install/image-20250604214752169.png" alt="image-20250604214752169"></p><h2 id="2-换源"><a href="#2-换源" class="headerlink" title="2. 换源"></a>2. 换源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qt-unified-windows-x64-4.6.1-online.exe --mirror https://mirrors.tuna.tsinghua.edu.cn/qt</span><br></pre></td></tr></table></figure><p><img src="/qt/qt-install/Snipaste_2024-04-18_16-15-24.png" alt="Snipaste_2024-04-18_16-15-24"></p><p><strong>安装时最好一点一点装，速度很慢，一次点太多容易安装失败</strong></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows界面配置</title>
      <link href="/other/windows-interface-config/"/>
      <url>/other/windows-interface-config/</url>
      
        <content type="html"><![CDATA[<h3 id="1-恢复Windows-11-右键菜单完整显示"><a href="#1-恢复Windows-11-右键菜单完整显示" class="headerlink" title="1. 恢复Windows 11 右键菜单完整显示"></a>1. 恢复Windows 11 右键菜单完整显示</h3><p>打开Windows PowerShell 命令提示符，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe add “HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32” /f /ve</span><br></pre></td></tr></table></figure><p><img src="/other/windows-interface-config/image-20240621090935399.png" alt="image-20240621090935399"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /im explorer.exe &amp; start explorer.exe</span><br></pre></td></tr></table></figure><p><img src="/other/windows-interface-config/image-20240621090222405.png" alt="image-20240621090222405"></p><h3 id="2-删除WPS自带的右键菜单"><a href="#2-删除WPS自带的右键菜单" class="headerlink" title="2. 删除WPS自带的右键菜单"></a>2. 删除WPS自带的右键菜单</h3><p><img src="/other/windows-interface-config/image-20250213101622218.png" alt="image-20250213101622218"></p><p><img src="/other/windows-interface-config/image-20250213101717062.png" alt="image-20250213101717062"></p><p><img src="/other/windows-interface-config/image-20250213101749296.png" alt="image-20250213101749296"></p><p><img src="/other/windows-interface-config/image-20250213101903701.png" alt="image-20250213101903701"></p><h3 id="3-修改文件资源管理器的背景颜色"><a href="#3-修改文件资源管理器的背景颜色" class="headerlink" title="3. 修改文件资源管理器的背景颜色"></a>3. 修改文件资源管理器的背景颜色</h3><p><img src="/other/windows-interface-config/image-20241005003303701.png" alt="image-20241005003303701"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc</title>
      <link href="/linux/gcc/"/>
      <url>/linux/gcc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-GCC常用参数"><a href="#1-GCC常用参数" class="headerlink" title="1. GCC常用参数"></a>1. GCC常用参数</h1><table><thead><tr><th><strong>gcc编译选项</strong></th><th><strong>选项的意义</strong></th></tr></thead><tbody><tr><td>-E</td><td>预处理指定的源文件，不进行编译</td></tr><tr><td>-S</td><td>编译指定的源文件，但是不进行汇编</td></tr><tr><td><code>-c</code></td><td>编译、汇编指定的源文件，但是不进行链接</td></tr><tr><td><code>-o [file1] [file2] / [file2] -o [file1]</code></td><td>将文件 file2 编译成文件 file1</td></tr><tr><td><code>-I</code> directory (大写的i)</td><td>指定 include 包含文件的搜索目录</td></tr><tr><td><code>-g</code></td><td>在编译的时候，生成调试信息，该程序可以被调试器调试</td></tr><tr><td>-D</td><td>在程序编译的时候，指定一个宏</td></tr><tr><td>-w</td><td>不生成任何警告信息, 不建议使用, 有些时候警告就是错误</td></tr><tr><td>-Wall</td><td>生成所有警告信息</td></tr><tr><td>-On</td><td>n的取值范围：0~3。编译器的优化选项的4个级别，-O0表示没有优化，-O1为缺省值，-O3优化级别最高</td></tr><tr><td><code>-l</code></td><td>在程序编译的时候，指定使用的库</td></tr><tr><td><code>-L</code></td><td>指定编译的时候，搜索的库的路径。</td></tr><tr><td><code>-fPIC/fpic</code></td><td>生成与位置无关的代码</td></tr><tr><td><code>-shared</code></td><td>生成共享目标文件。通常用在建立共享库时</td></tr><tr><td><code>-std</code></td><td>指定C方言，如:-std&#x3D;c99，gcc默认的方言是GNU C</td></tr></tbody></table><h1 id="2-使用预处理器宏来控制代码的不同执行路径"><a href="#2-使用预处理器宏来控制代码的不同执行路径" class="headerlink" title="2. 使用预处理器宏来控制代码的不同执行路径"></a>2. 使用预处理器宏来控制代码的不同执行路径</h1><p>通过在编译时定义宏，可以启用或禁用特定的代码块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> FEATURE_A</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Feature A is enabled.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Feature A is not enabled.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> FEATURE_B</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Feature B is enabled.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Feature B is not enabled.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/linux/gcc/image-20240612134413327.png" alt="image-20240612134413327"></p><ul><li><code>-D&lt;MACRO&gt;</code> 是编译指令，用于定义宏。在这个例子中，<code>-DFEATURE_A</code> 定义了宏 <code>FEATURE_A</code>，使得与该宏相关的代码块被包含进来进行编译。</li><li><code>#ifdef</code> 和 <code>#else</code> 是预处理器指令，用于检查宏是否被定义。<code>#ifdef FEATURE_A</code> 表示当 <code>FEATURE_A</code> 被定义时，包含其后的代码块。<code>#else</code> 则表示如果 <code>FEATURE_A</code> 未被定义时包含其后的代码块。</li><li><code>#endif</code> 用于结束条件编译语句。</li></ul><p>通过这种方式，你可以在编译时灵活地控制哪些代码被编译和执行，适应不同的编译需求或配置环境。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu基本配置</title>
      <link href="/linux/ubuntu-config/"/>
      <url>/linux/ubuntu-config/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h1><h2 id="1-1-安装在虚拟机中"><a href="#1-1-安装在虚拟机中" class="headerlink" title="1.1 安装在虚拟机中"></a>1.1 安装在虚拟机中</h2><p>可以用迅雷来加速</p><p><a href="https://cn.ubuntu.com/download/desktop">下载Ubuntu桌面系统 | Ubuntu</a></p><p><img src="/linux/ubuntu-config/image-20240606174539186.png" alt="image-20240606174539186"></p><p><img src="/linux/ubuntu-config/image-20240606174645306.png" alt="image-20240606174645306"></p><h2 id="1-2-在windows中安装子系统"><a href="#1-2-在windows中安装子系统" class="headerlink" title="1.2 在windows中安装子系统"></a>1.2 在windows中安装子系统</h2><h1 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2. 安装步骤"></a>2. 安装步骤</h1><p>直接点下一步就好。</p><p><img src="/linux/ubuntu-config/image-20250312173434102.png"></p><p>删除多余的工作空间</p><p><img src="/linux/ubuntu-config/image-20250313103230098.png" alt="image-20250313103230098"></p><h1 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h1><h2 id="2-1-更新可用的软件包列表"><a href="#2-1-更新可用的软件包列表" class="headerlink" title="2.1 更新可用的软件包列表"></a>2.1 更新可用的软件包列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure><h2 id="2-2-安装vmtools"><a href="#2-2-安装vmtools" class="headerlink" title="2.2 安装vmtools"></a>2.2 安装vmtools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install open-vm-tools open-vm-tools-desktop</span><br></pre></td></tr></table></figure><h2 id="2-3-安装网络管理和调试的工具"><a href="#2-3-安装网络管理和调试的工具" class="headerlink" title="2.3 安装网络管理和调试的工具"></a>2.3 安装网络管理和调试的工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install net-tools</span><br></pre></td></tr></table></figure><p> <code>net-tools</code> 包中包含的主要工具：</p><table><thead><tr><th><strong>ifconfig</strong></th><th><strong>配置网络接口，查看和更改与网络接口相关的参数</strong></th></tr></thead><tbody><tr><td><strong>netstat</strong></td><td><strong>显示网络连接、路由表、接口统计信息、伪装连接和多播成员</strong></td></tr><tr><td><strong>route</strong></td><td><strong>显示和修改IP路由表</strong></td></tr><tr><td><strong>arp</strong></td><td><strong>操作系统的ARP缓存，用于显示和修改IP地址到以太网地址的映射</strong></td></tr><tr><td><strong>hostname</strong></td><td><strong>显示或设置系统的主机名</strong></td></tr><tr><td><strong>mii-tool</strong></td><td><strong>检测、配置和管理基于MII的以太网设备</strong></td></tr></tbody></table><h2 id="2-4-安装基础编译工具和远程连接工具"><a href="#2-4-安装基础编译工具和远程连接工具" class="headerlink" title="2.4 安装基础编译工具和远程连接工具"></a>2.4 安装基础编译工具和远程连接工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update<span class="comment">#更新可用的软件包列表</span></span><br><span class="line"><span class="built_in">sudo</span> apt install make g++ gdb gdbserver openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者使用以下命令一次性安装所有基础编译工具 该元包含 gcc、g++、make 等核心工具</span></span><br><span class="line"><span class="built_in">sudo</span> apt install build-essential</span><br></pre></td></tr></table></figure><h2 id="2-5-设置窗口居中"><a href="#2-5-设置窗口居中" class="headerlink" title="2.5 设置窗口居中"></a>2.5 设置窗口居中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断Ubuntu系统使用的是Wayland还是X11显示服务器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$XDG_SESSION_TYPE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动居中窗口</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.mutter center-new-windows <span class="literal">true</span> </span><br><span class="line"><span class="comment"># 取消窗口居中</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.mutter center-new-windows <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="2-6-屏幕分辨率设置"><a href="#2-6-屏幕分辨率设置" class="headerlink" title="2.6 屏幕分辨率设置"></a>2.6 屏幕分辨率设置</h2><blockquote><p>注意：设置完此项后会使谷歌浏览器变模糊</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是wayland用如下命令：</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.mutter experimental-features <span class="string">&quot;[&#x27;scale-monitor-framebuffer&#x27;]&quot;</span></span><br><span class="line"><span class="comment"># 如果是X11用如下命令：</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.mutter experimental-features <span class="string">&quot;[&#x27;x11-randr-fractional-scaling&#x27;]&quot;</span></span><br><span class="line"><span class="comment"># 重置</span></span><br><span class="line">gsettings reset org.gnome.mutter experimental-features</span><br></pre></td></tr></table></figure><h2 id="2-7-安装gnome-tweaks"><a href="#2-7-安装gnome-tweaks" class="headerlink" title="2.7 安装gnome-tweaks"></a>2.7 安装gnome-tweaks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gnome-tweaks</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">gnome-tweaks</span><br></pre></td></tr></table></figure><p><img src="/linux/ubuntu-config/image-20250604212630797.png" alt="image-20250604212630797"></p><h2 id="2-8-挂载NTFS文件格式的U盘"><a href="#2-8-挂载NTFS文件格式的U盘" class="headerlink" title="2.8 挂载NTFS文件格式的U盘"></a>2.8 挂载NTFS文件格式的U盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有磁盘和分区信息</span></span><br><span class="line"><span class="built_in">sudo</span> fdisk -l</span><br></pre></td></tr></table></figure><p><img src="/linux/ubuntu-config/image-20250605102329809.png" alt="image-20250605102329809"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若未安装驱动</span></span><br><span class="line"><span class="built_in">sudo</span> apt install ntfs-3g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建挂载点</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /media/usb  </span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line"><span class="built_in">sudo</span> mount -t ntfs-3g /dev/sdb1 /media/usb</span><br></pre></td></tr></table></figure><h2 id="2-9-卸载火狐浏览器"><a href="#2-9-卸载火狐浏览器" class="headerlink" title="2.9 卸载火狐浏览器"></a>2.9 卸载火狐浏览器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.关闭Firefox进程</span></span><br><span class="line">killall -KILL firefox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查找所有Firefox相关包</span></span><br><span class="line">dpkg --get-selections | grep firefox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.使用 apt-get purge 卸载所有相关包（以下命令为示例，需替换为实际查到的包名）：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get purge firefox firefox-locale-en firefox-gnome-support ubufox</span><br><span class="line"><span class="comment"># 或者直接卸载所有匹配 firefox* 的包：</span></span><br><span class="line"><span class="built_in">sudo</span> apt purge firefox* -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.删除用户配置文件 Firefox的个人数据存储在 ~/.mozilla 目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.mozilla</span><br><span class="line"><span class="comment"># 5.删除全局配置文件</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -r /etc/firefox/</span><br><span class="line"><span class="comment"># 6.清理软件包缓存</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get autoclean &amp;&amp; <span class="built_in">sudo</span> apt-get clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.处理Snap安装的Firefox（如适用） 如果通过Snap安装，需额外执行：</span></span><br><span class="line"><span class="built_in">sudo</span> snap remove firefox</span><br><span class="line"><span class="built_in">rm</span> -rf ~/snap/firefox</span><br></pre></td></tr></table></figure><h2 id="2-10-安装谷歌浏览器"><a href="#2-10-安装谷歌浏览器" class="headerlink" title="2.10 安装谷歌浏览器"></a>2.10 安装谷歌浏览器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> dpkg -i google-chrome-stable_current_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在安装过程中遇到依赖问题，执行以下命令修复：</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -f</span><br></pre></td></tr></table></figure><h2 id="2-11-安装Qt"><a href="#2-11-安装Qt" class="headerlink" title="2.11 安装Qt"></a>2.11 安装Qt</h2><a class="btn-anzhiyu green larger" href="https://www.wangyongwang.cn/qt/qt-install/"   title="安装Qt"><i class="far fa-hand-point-right"></i><span>安装Qt</span></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./qt-unified-linux-x64-4.5.2-online.run --mirror https://mirrors.tuna.tsinghua.edu.cn/qt/</span><br></pre></td></tr></table></figure><p><img src="/linux/ubuntu-config/image-20250406163923129.png" alt="image-20250406163923129"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libxcb-cursor0 libxcb-cursor-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install libxcb-xinerama0</span><br></pre></td></tr></table></figure><blockquote><p>Qt加载需要gcc和g++,构建需要make和libGL</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用以下命令检查libGL库是否安装</span></span><br><span class="line">locate libGL | grep libGLU</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若没有</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/lib/x86_64-linux-gnu/libGLU.so.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/lib/x86_64-linux-gnu/libGLU.so.1.3.1，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">则需要安装libgl1-mesa-dev，命令如下：</span></span><br><span class="line">sudo apt-get install libgl1-mesa-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次点击运行按钮如果还是报错，则需要创建一个软链接：</span></span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/libGL.so</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若要使用OpenGL还需安装：</span></span><br><span class="line">sudo apt-get install mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qnx系统同时启动多个Kanzi项目</title>
      <link href="/kanzi/multiple-projects/"/>
      <url>/kanzi/multiple-projects/</url>
      
        <content type="html"><![CDATA[<h1 id="在onConfigure函数中添加配置"><a href="#在onConfigure函数中添加配置" class="headerlink" title="在onConfigure函数中添加配置"></a>在onConfigure函数中添加配置</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">onConfigure</span><span class="params">(ApplicationProperties&amp; configuration)</span> KZ_OVERRIDE</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    configuration.defaultWindowProperties.groupName = <span class="built_in">string</span>(<span class="string">&quot;FirstApplicationWindowGroupName&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kanzi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kanzi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kanzi配置屏幕透明</title>
      <link href="/kanzi/alpha/"/>
      <url>/kanzi/alpha/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Kanzi工程屏幕节点设置"><a href="#1-Kanzi工程屏幕节点设置" class="headerlink" title="1. Kanzi工程屏幕节点设置"></a>1. Kanzi工程屏幕节点设置</h1><p>将<strong>属性 (Properties)</strong> 中将<strong>屏幕清除颜色 (Screen Clear Color)</strong> 属性设置为用于<strong>屏幕 (Screen)</strong> 节点以外的区域的颜色。<br>当您设置<strong>屏幕清除颜色 (Screen Clear Color)</strong> 属性时，Kanzi 会使用您之前设置的颜色清除 <strong>屏幕 (Screen)</strong> 节点以外的屏幕，然后再渲染任何其他区域。</p><p><img src="/kanzi/alpha/Snipaste_2024-05-30_16-41-38.png" alt="Snipaste_2024-05-30_16-41-38"></p><h1 id="2-application-cfg文件配置"><a href="#2-application-cfg文件配置" class="headerlink" title="2. application.cfg文件配置"></a>2. application.cfg文件配置</h1><p>将SurfaceBitsAlpha设为8</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">SurfaceBitsAlpha</span> <span class="string">=</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p><img src="/kanzi/alpha/image-20240530164702594.png" alt="image-20240530164702594"></p><h1 id="3-实际效果"><a href="#3-实际效果" class="headerlink" title="3. 实际效果"></a>3. 实际效果</h1><h2 id="Kanzi界面："><a href="#Kanzi界面：" class="headerlink" title="Kanzi界面："></a>Kanzi界面：</h2><p><img src="/kanzi/alpha/Snipaste_2024-05-30_18-45-36.png" alt="Snipaste_2024-05-30_18-45-36"></p><h2 id="实际效果："><a href="#实际效果：" class="headerlink" title="实际效果："></a>实际效果：</h2><p><img src="/kanzi/alpha/IMG_20240530_174626.jpg" alt="IMG_20240530_174626"></p>]]></content>
      
      
      <categories>
          
          <category> kanzi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kanzi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter环境配置</title>
      <link href="/flutter/flutter-config/"/>
      <url>/flutter/flutter-config/</url>
      
        <content type="html"><![CDATA[<h1 id="1-电脑上安装JDK"><a href="#1-电脑上安装JDK" class="headerlink" title="1. 电脑上安装JDK"></a>1. 电脑上安装JDK</h1><h2 id="1-1-下载安装JDK"><a href="#1-1-下载安装JDK" class="headerlink" title="1.1 下载安装JDK"></a>1.1 下载安装JDK</h2><li><code>Java官方下载地址</code>：<a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows">https://www.oracle.com/java/technologies/downloads/#jdk17-windows</a></li><p><img src="/flutter/flutter-config/Snipaste_2024-05-16_14-05-21.png" alt="Snipaste_2024-05-16_14-05-21"></p><h2 id="1-2-配置JDK环境"><a href="#1-2-配置JDK环境" class="headerlink" title="1.2 配置JDK环境"></a>1.2 配置JDK环境</h2><h3 id="1-2-1-系统变量-里面新增JAVA-HOME，设置值为java-sdk-根目录："><a href="#1-2-1-系统变量-里面新增JAVA-HOME，设置值为java-sdk-根目录：" class="headerlink" title="1.2.1 系统变量 里面新增JAVA_HOME，设置值为java sdk 根目录："></a>1.2.1 系统变量 里面新增JAVA_HOME，设置值为java sdk 根目录：</h3><p><img src="/flutter/flutter-config/Snipaste_2024-05-16_14-23-33.png" alt="Snipaste_2024-05-16_14-23-33"></p><h3 id="1-2-2-系统变量-找到Path-在Path环境变量里面增加如下代码-jdk17无需配置jre路径"><a href="#1-2-2-系统变量-找到Path-在Path环境变量里面增加如下代码-jdk17无需配置jre路径" class="headerlink" title="1.2.2 系统变量 找到Path 在Path环境变量里面增加如下代码 (jdk17无需配置jre路径)"></a>1.2.2 系统变量 找到Path 在Path环境变量里面增加如下代码 (jdk17无需配置jre路径)</h3><p><code>%JAVA_HOME%\bin</code></p><p><img src="/flutter/flutter-config/Snipaste_2024-05-16_17-50-06.png" alt="Snipaste_2024-05-16_17-50-06"></p><h1 id="2-下载安装Android-Studio"><a href="#2-下载安装Android-Studio" class="headerlink" title="2. 下载安装Android Studio"></a>2. 下载安装Android Studio</h1><h2 id="2-1-官网下载"><a href="#2-1-官网下载" class="headerlink" title="2.1 官网下载"></a>2.1 官网下载</h2><li><code>官方下载地址</code>：<a target="_blank" rel="noopener external nofollow noreferrer" href="https://developer.android.google.cn/studio">https://developer.android.google.cn/studio</a></li><p><img src="/flutter/flutter-config/Snipaste_2024-05-17_10-16-48.png" alt="Snipaste_2024-05-17_10-16-48"></p><h2 id="2-2-下载Dart和Flutter插件"><a href="#2-2-下载Dart和Flutter插件" class="headerlink" title="2.2 下载Dart和Flutter插件"></a>2.2 下载Dart和Flutter插件</h2><p><img src="/flutter/flutter-config/Snipaste_2024-05-17_10-18-45.png" alt="Snipaste_2024-05-17_10-18-45"></p><p><img src="/flutter/flutter-config/Snipaste_2024-05-17_10-19-31.png" alt="Snipaste_2024-05-17_10-19-31"></p><p><img src="/flutter/flutter-config/Snipaste_2024-05-17_10-21-48.png" alt="Snipaste_2024-05-17_10-21-48"></p><h1 id="3-下载配置Flutter"><a href="#3-下载配置Flutter" class="headerlink" title="3. 下载配置Flutter"></a>3. 下载配置Flutter</h1><h2 id="3-1-官网下载flutter"><a href="#3-1-官网下载flutter" class="headerlink" title="3.1 官网下载flutter"></a>3.1 官网下载flutter</h2><li><code>官方下载地址</code>：<a target="_blank" rel="noopener external nofollow noreferrer" href="https://docs.flutter.cn/release/archive?tab=windows">https://docs.flutter.cn/release/archive?tab=windows</a></li><p><img src="/flutter/flutter-config/Snipaste_2024-05-17_11-03-39.png" alt="Snipaste_2024-05-17_11-03-39"></p><h2 id="3-2-配置bin路径的环境变量"><a href="#3-2-配置bin路径的环境变量" class="headerlink" title="3.2 配置bin路径的环境变量"></a>3.2 配置bin路径的环境变量</h2><p><img src="/flutter/flutter-config/image-20240517113038515.png" alt="image-20240517113038515"></p><p><img src="/flutter/flutter-config/image-20240517113146753.png" alt="image-20240517113146753"></p><h2 id="3-3-配置国内镜像"><a href="#3-3-配置国内镜像" class="headerlink" title="3.3 配置国内镜像"></a>3.3 配置国内镜像</h2><p><a href="https://docs.flutter.cn/community/china">在中国网络环境下使用 Flutter | Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></p><p>在 Windows 上：</p><p><strong>Flutter</strong> <strong>社区镜像</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$env:PUB_HOSTED_URL=&quot;https://pub.flutter-io.cn&quot;;</span></span><br><span class="line"><span class="string">$env:FLUTTER_STORAGE_BASE_URL=&quot;https://storage.flutter-io.cn&quot;</span></span><br></pre></td></tr></table></figure><p><strong>清华大学</strong> <strong>TUNA</strong> <strong>协会镜像</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">FLUTTER_STORAGE_BASE_URL:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/flutter</span></span><br><span class="line"><span class="attr">PUB_HOSTED_URL:</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/dart-pub</span></span><br></pre></td></tr></table></figure><p><img src="/flutter/flutter-config/image-20240517134740566.png" alt="image-20240517134740566"></p><p><img src="/flutter/flutter-config/image-20240517134831840.png" alt="image-20240517134831840"></p><h2 id="3-4运行-flutter-doctor-命令检测环境是否配置成功"><a href="#3-4运行-flutter-doctor-命令检测环境是否配置成功" class="headerlink" title="3.4运行 flutter doctor 命令检测环境是否配置成功"></a>3.4运行 flutter doctor 命令检测环境是否配置成功</h2><p><img src="/flutter/flutter-config/image-20240517135612762.png" alt="image-20240517135612762"></p><h3 id="3-4-1-Android-toolchain报错"><a href="#3-4-1-Android-toolchain报错" class="headerlink" title="3.4.1 Android toolchain报错"></a>3.4.1 Android toolchain报错</h3><p><img src="/flutter/flutter-config/image-20240630223541317.png" alt="image-20240630223541317"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 重新配置AndoridSDK的位置</span><br><span class="line">flutter config --android-sdk D:\Android\AndroidSDK</span><br></pre></td></tr></table></figure><h3 id="3-4-2-Android-licenses-not-accepted"><a href="#3-4-2-Android-licenses-not-accepted" class="headerlink" title="3.4.2 Android licenses not accepted"></a>3.4.2 Android licenses not accepted</h3><p><img src="/flutter/flutter-config/image-20240630223755951.png" alt="image-20240630223755951"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><h1 id="4-创建第一个Flutter项目"><a href="#4-创建第一个Flutter项目" class="headerlink" title="4. 创建第一个Flutter项目"></a>4. 创建第一个Flutter项目</h1><p><img src="/flutter/flutter-config/image-20240517140945148.png" alt="image-20240517140945148"></p><p><img src="/flutter/flutter-config/image-20240517141042242.png" alt="image-20240517141042242"></p><p><img src="/flutter/flutter-config/image-20240517141323250.png" alt="image-20240517141323250"></p><p>打开项目目录下的安卓目录</p><p><img src="/flutter/flutter-config/image-20240517145048386.png" alt="image-20240517145048386"></p><p><img src="/flutter/flutter-config/image-20240517145320505.png" alt="image-20240517145320505"></p><p>如果下载不成功的话，直接在网上把需要的包下载下来</p><p>下载地址：<a href="https://services.gradle.org/distributions/">Gradle Distributions</a></p><h1 id="5-创建虚拟机"><a href="#5-创建虚拟机" class="headerlink" title="5. 创建虚拟机"></a>5. 创建虚拟机</h1><p><img src="/flutter/flutter-config/image-20240522092644991.png" alt="image-20240522092644991"></p><p><img src="/flutter/flutter-config/image-20240522100121786.png" alt="image-20240522100121786"></p><p><img src="/flutter/flutter-config/image-20240522100420815.png" alt="image-20240522100420815"></p><p><img src="/flutter/flutter-config/image-20240522100845007.png" alt="image-20240522100845007"></p><p><img src="/flutter/flutter-config/image-20240522101032170.png" alt="image-20240522101032170"></p><p><img src="/flutter/flutter-config/image-20240522101228297.png" alt="image-20240522101228297"></p><p><img src="/flutter/flutter-config/image-20240522104725311.png" alt="image-20240522104725311"></p><h1 id="6-运行第一个Flutter程序"><a href="#6-运行第一个Flutter程序" class="headerlink" title="6. 运行第一个Flutter程序"></a>6. 运行第一个Flutter程序</h1><p><img src="/flutter/flutter-config/image-20240522105203184.png" alt="image-20240522105203184"></p><h1 id="7-VSCode安装插件"><a href="#7-VSCode安装插件" class="headerlink" title="7. VSCode安装插件"></a>7. VSCode安装插件</h1><h2 id="7-1-代码提示插件"><a href="#7-1-代码提示插件" class="headerlink" title="7.1 代码提示插件"></a>7.1 代码提示插件</h2><p><img src="/flutter/flutter-config/image-20240522134439891.png" alt="image-20240522134439891"></p><h2 id="7-2-代码保存时自动格式化"><a href="#7-2-代码保存时自动格式化" class="headerlink" title="7.2 代码保存时自动格式化"></a>7.2 代码保存时自动格式化</h2><p><img src="/flutter/flutter-config/image-20240702003246615.png" alt="image-20240702003246615"></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter入门</title>
      <link href="/flutter/flutter-primer/"/>
      <url>/flutter/flutter-primer/</url>
      
        <content type="html"><![CDATA[<h1 id="1-flutter基本命令"><a href="#1-flutter基本命令" class="headerlink" title="1.flutter基本命令"></a>1.flutter基本命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 依赖管理</span></span><br><span class="line">flutter pub get <span class="comment">#安装和更新 pubspec.yaml 中定义的依赖包。</span></span><br><span class="line">flutter pub upgrade <span class="comment">#升级所有依赖包到符合 pubspec.yaml 中定义的版本范围的最新版本。</span></span><br><span class="line">flutter pub outdated <span class="comment">#检查已安装依赖包是否有新版本，用于发现哪些依赖可以升级。</span></span><br><span class="line">flutter pub cache repair <span class="comment">#修复缓存中损坏的依赖包，重新下载所有依赖项。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 构建项目</span></span><br><span class="line">flutter build &lt;platform&gt; <span class="comment">#为特定平台构建项目，生成可以发布的应用包。常见选项包括：</span></span><br><span class="line">flutter build apk <span class="comment">#为 Android 构建 APK 文件。</span></span><br><span class="line">flutter build appbundle <span class="comment">#为 Android 构建 App Bundle 文件，适合发布到 Google Play。</span></span><br><span class="line">flutter build ios <span class="comment">#为 iOS 构建发布版本（需要在 macOS 上运行）。</span></span><br><span class="line">flutter build web <span class="comment">#为 Web 构建项目，生成 HTML、CSS 和 JavaScript 文件。</span></span><br><span class="line">flutter build windows <span class="comment">#为桌面平台构建项目。</span></span><br><span class="line">flutter build macos</span><br><span class="line">flutter build linux </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 运行和调试</span></span><br><span class="line">flutter run <span class="comment">#运行 Flutter 应用，默认在已连接的设备或模拟器上调试应用。</span></span><br><span class="line"><span class="comment">#常用选项：flutter run -d &lt;device_id&gt;，可以指定设备 ID（比如模拟器或真机）。</span></span><br><span class="line">flutter run -d all</span><br><span class="line">flutter attach <span class="comment">#用于连接到已在设备上运行的 Flutter 应用，方便调试无需重启应用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Flutter run key commands.</span></span><br><span class="line">r <span class="comment"># 热加载</span></span><br><span class="line">R <span class="comment"># 热重启</span></span><br><span class="line">p <span class="comment"># 显示网格</span></span><br><span class="line">o <span class="comment"># 切换android和ios的预览模式</span></span><br><span class="line">q <span class="comment"># 退出调试预览模式</span></span><br><span class="line">h <span class="comment"># List all available interactive commands.</span></span><br><span class="line">d <span class="comment"># Detach (terminate &quot;flutter run&quot; but leave application running).</span></span><br><span class="line">c <span class="comment"># Clear the screen</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 检查和诊断</span></span><br><span class="line">flutter doctor <span class="comment">#检查开发环境是否已正确配置，列出 Flutter 运行所需的依赖项及其状态。</span></span><br><span class="line">flutter analyze <span class="comment">#静态分析代码，检查代码是否符合 Dart 规范，并发现潜在的错误和警告。</span></span><br><span class="line">flutter clean <span class="comment">#清除项目生成的临时文件和缓存文件。通常在遇到编译或构建问题时使用，可以强制项目重新构建。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 测试</span></span><br><span class="line">flutter <span class="built_in">test</span> <span class="comment">#运行项目中的测试文件（通常位于 test/ 目录），用于单元测试和 Widget 测试。</span></span><br><span class="line">flutter drive <span class="comment">#用于运行集成测试，通常配合 integration_test 包使用，可以自动化地测试应用的整体功能。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 发布相关</span></span><br><span class="line">flutter install <span class="comment">#将构建好的应用安装到已连接的设备上，用于测试已构建的 APK 或 IPA 文件。</span></span><br><span class="line">flutter pub publish <span class="comment">#用于将 Dart 包发布到 pub.dev（通常用于发布 Flutter 插件或包，适用于需要共享的代码库）。</span></span><br></pre></td></tr></table></figure><ul><li>查看可用设备</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter devices</span><br></pre></td></tr></table></figure><p><img src="/flutter/flutter-primer/image-20240522142653086.png" alt="image-20240522142653086"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行在所有设备</span></span><br><span class="line">flutter run -d all</span><br><span class="line"><span class="comment"># 指定设备运行</span></span><br><span class="line">flutter run -d windows</span><br></pre></td></tr></table></figure><p>代码对齐快捷键</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VSCode</span></span><br><span class="line"><span class="string">Shift</span> <span class="string">+</span> <span class="string">Alt</span> <span class="string">+</span> <span class="string">F</span></span><br><span class="line"><span class="comment"># Android Studio</span></span><br><span class="line"><span class="string">Ctrl</span> <span class="string">+</span> <span class="string">Alt</span> <span class="string">+</span> <span class="string">L</span></span><br></pre></td></tr></table></figure><h1 id="2-Flutter目录结构介绍"><a href="#2-Flutter目录结构介绍" class="headerlink" title="2. Flutter目录结构介绍"></a>2. Flutter目录结构介绍</h1><p><img src="/flutter/flutter-primer/image-20240522111711427.png" alt="image-20240522111711427"></p><table><thead><tr><th><strong>文件夹</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>.dart_tool</td><td>缓存项目依赖项的信息。<br />存储构建和编译过程中生成的临时文件。<br />包含一些工具和包的配置文件，这些文件会在 <code>flutter pub get</code> 或 <code>flutter build</code> 等命令执行时<strong>自动生成</strong>。<br /><strong>建议在 <code>.gitignore</code> 中排除它</strong></td></tr><tr><td>.idea</td><td><strong>项目特定的配置文件</strong>：例如代码样式、检查设置等。<br /><strong>本地开发者特有的设置</strong>：如最近打开的文件、调试配置、窗口布局等。<br /><strong>建议在 <code>.gitignore</code> 中排除它</strong></td></tr><tr><td>android</td><td>android平台相关代码</td></tr><tr><td>build</td><td>构建时生成的临时目录，用于存放编译后的文件、资源等构建产物<br /><strong>建议在 <code>.gitignore</code> 中排除它</strong></td></tr><tr><td>ios</td><td>ios平台相关代码</td></tr><tr><td>lib</td><td>flutter相关代码，我们编写的代码就在这个文件夹</td></tr><tr><td>linux</td><td>Linux平台相关的代码</td></tr><tr><td>macos</td><td>macos平台相关的代码</td></tr><tr><td>test</td><td>用于存放测试代码</td></tr><tr><td>web</td><td>web相关的代码</td></tr><tr><td>windows</td><td>windows相关的代码</td></tr><tr><td>.gitignore</td><td>git忽略文件</td></tr><tr><td>.metadata</td><td>记录了一些Flutter SDK 版本信息和项目的构建配置信息<br /><strong>建议在 <code>.gitignore</code> 中排除它</strong></td></tr><tr><td>analysis_options.yaml</td><td>分析dart语法的文件，老项目升级成新项目有警告信息的话可以删掉<br /><strong>建议将其纳入版本控制系统</strong></td></tr><tr><td>pubspec.lock</td><td><strong>锁定依赖版本</strong>：记录每个依赖的确切版本，确保在不同环境中安装的依赖版本一致，避免因依赖更新导致的意外问题。<br /><strong>版本管理</strong>：如果只根据 <code>pubspec.yaml</code> 安装依赖，Flutter 可能会安装最新符合要求的版本，而 <code>pubspec.lock</code> 则确保安装的版本固定不变。<br /><strong>建议将其纳入版本控制系统</strong></td></tr><tr><td>pubspec.yaml</td><td>配置文件，一般存放一些第三方库的依赖</td></tr></tbody></table><p><img src="/flutter/flutter-primer/image-20241030225111877.png" alt="image-20241030225111877"></p><table><thead><tr><th><strong>文件夹</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>.gradle</td><td>Gradle 构建缓存<br /><strong>建议在 <code>.gitignore</code> 中排除它</strong></td></tr><tr><td>.idea</td><td><strong>项目特定的配置文件</strong>：例如代码样式、检查设置等。<br /><strong>本地开发者特有的设置</strong>：如最近打开的文件、调试配置、窗口布局等。<br /><strong>建议在 <code>.gitignore</code> 中排除它</strong></td></tr><tr><td>app</td><td>Android 原生代码和资源文件</td></tr><tr><td>gradle</td><td>**<code>gradle-wrapper.properties</code><strong>：指定了 Gradle 的版本，并配置了 Gradle Wrapper 的下载 URL。通过该文件，项目可以使用正确的 Gradle 版本，无需开发者手动安装。<br /></strong><code>wrapper/</code>**：存放 Gradle Wrapper 相关的文件，确保在不同开发环境中使用相同的 Gradle 版本，以保证构建一致性。<br /><strong>需要将其纳入版本控制系统</strong>，保证团队成员或其他开发环境在构建时自动使用正确的 Gradle 版本。</td></tr><tr><td>build.gradle</td><td>Android 项目构建配置的核心，控制了项目的依赖、构建行为和目标平台的兼容性。</td></tr><tr><td>gradle.properties</td><td>用于设置一些 Gradle 构建系统的全局属性和配置选项，以便优化构建性能和控制构建过程。<br /><strong>建议将其纳入版本控制系统</strong></td></tr><tr><td>gradlew</td><td><strong>版本控制</strong>：<code>gradlew</code> 允许你在项目中指定 Gradle 的版本。这样，开发者无需手动安装 Gradle，只需使用项目中定义的版本进行构建。<br /><strong>环境一致性</strong>：通过使用 Gradle Wrapper，确保所有开发者在构建项目时使用相同的 Gradle 版本，避免因版本不一致引起的构建问题。<br /><strong>简单的构建命令</strong>：使用 <code>./gradlew</code>（在 Unix 系统上）或 <code>gradlew.bat</code>（在 Windows 上）运行构建命令，可以直接在项目根目录中使用，而不需要全局安装 Gradle。<br /><strong>建议将其纳入版本控制系统</strong></td></tr><tr><td>gradlew.bat</td><td><strong>执行 Gradle 构建</strong>：通过 <code>gradlew.bat</code> 文件，Windows 用户可以运行 Gradle 构建命令，而无需安装 Gradle。<br /><strong>版本控制</strong>：它确保用户在构建项目时使用与项目配置中指定的 Gradle 版本一致，避免因版本不一致而导致的构建问题。<br /><strong>通常在版本控制中</strong>，应将 <code>gradlew.bat</code> 与 <code>gradlew</code> 和 <code>gradle/wrapper/</code> 文件夹一并提交，以确保跨平台的构建一致性。</td></tr><tr><td>local.properties</td><td>主要用于存储与本地环境相关的配置信息，如 SDK 路径等<br /><strong>建议在 <code>.gitignore</code> 中排除它</strong></td></tr><tr><td>settings.gradle</td><td><strong>定义项目结构</strong>：该文件用于定义和包含一个或多个模块。对于 Android 项目来说，通常会有一个主应用模块和一些其他的库模块或子模块。<br /><strong>配置项目名称</strong>：可以在该文件中设置项目的名称，这在构建过程中使用。</td></tr></tbody></table><h1 id="3-Flutter入口文件，入口方法"><a href="#3-Flutter入口文件，入口方法" class="headerlink" title="3. Flutter入口文件，入口方法"></a>3. Flutter入口文件，入口方法</h1><p>每一个flutter项目的lib目录里面都有一个main.dart这个文件就是flutter的入口文件</p><p>main.dart里面的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line">也可以简写</span><br><span class="line"><span class="keyword">void</span> main()=&gt;runApp(MyApp());</span><br></pre></td></tr></table></figure><p>其中的main方法是dart的入口方法。runApp方法是flutter的入口方法。</p><p>MyApp是自定义的一个组件。</p><h1 id="4-Flutter第一个Demo-Center组件的使用"><a href="#4-Flutter第一个Demo-Center组件的使用" class="headerlink" title="4. Flutter第一个Demo,Center组件的使用"></a>4. Flutter第一个Demo,Center组件的使用</h1><h2 id="4-1-Demo1"><a href="#4-1-Demo1" class="headerlink" title="4.1 Demo1"></a>4.1 Demo1</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">runApp(<span class="keyword">const</span> Center(</span><br><span class="line">child: Text(</span><br><span class="line"><span class="string">&quot;我是一个文本&quot;</span>,</span><br><span class="line">textDirection: TextDirection.ltr, <span class="comment">// 文本方向为从左到右</span></span><br><span class="line">),</span><br><span class="line">));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/flutter/flutter-primer/image-20240522133527784.png" alt="image-20240522133527784"></p><h2 id="4-2-Demo2"><a href="#4-2-Demo2" class="headerlink" title="4.2 Demo2"></a>4.2 Demo2</h2><p>给Text组件增加一些装饰</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> Center(</span><br><span class="line">    child: Text(</span><br><span class="line">      <span class="string">&quot;我是一个文本&quot;</span>,</span><br><span class="line">      textDirection: TextDirection.ltr, <span class="comment">// 文本方向为从左到右</span></span><br><span class="line">      style: TextStyle(</span><br><span class="line">        fontSize: <span class="number">40.0</span>,</span><br><span class="line">        <span class="comment">// color: Colors.yellow,</span></span><br><span class="line">        color: Color.fromRGBO(<span class="number">244</span>, <span class="number">233</span>, <span class="number">121</span>, <span class="number">0.5</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/flutter/flutter-primer/image-20240522140620525.png" alt="image-20240522140620525"></p><h2 id="4-3-Demo3"><a href="#4-3-Demo3" class="headerlink" title="4.3 Demo3"></a>4.3 Demo3</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    home: Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)),</span><br><span class="line">      body: <span class="keyword">const</span> Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&quot;我是一个文本&quot;</span>,</span><br><span class="line">          textDirection: TextDirection.ltr, <span class="comment">// 文本方向为从左到右</span></span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">40.0</span>,</span><br><span class="line">            <span class="comment">// color: Colors.yellow,</span></span><br><span class="line">            color: Color.fromRGBO(<span class="number">244</span>, <span class="number">233</span>, <span class="number">121</span>, <span class="number">0.5</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/flutter/flutter-primer/image-20240522143522882.png" alt="image-20240522143522882"></p><h2 id="4-4-Demo4"><a href="#4-4-Demo4" class="headerlink" title="4.4 Demo4"></a>4.4 Demo4</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    home: Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)),</span><br><span class="line">      body: <span class="keyword">const</span> HomeWidget(),</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&quot;我是一个文本&quot;</span>,</span><br><span class="line">          textDirection: TextDirection.ltr, <span class="comment">// 文本方向为从左到右</span></span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">40.0</span>,</span><br><span class="line">            <span class="comment">// color: Colors.yellow,</span></span><br><span class="line">            color: Color.fromRGBO(<span class="number">244</span>, <span class="number">233</span>, <span class="number">121</span>, <span class="number">0.5</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/flutter/flutter-primer/image-20240522144618358.png" alt="image-20240522144618358"></p><h1 id="5-Flutter单独将内容抽离成一个组件"><a href="#5-Flutter单独将内容抽离成一个组件" class="headerlink" title="5. Flutter单独将内容抽离成一个组件"></a>5. Flutter单独将内容抽离成一个组件</h1><p>在Flutter中自定义组件其实就是一个类，这个类需要继承StatelessWidget&#x2F;StatefulWidget</p><p><strong>StatelessWidget</strong> 是无状态组件，状态不可变的widget</p><p><strong>StatefulWidget</strong> 是有状态组件，持有的状态可能在widget生命周期改变</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Center(</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&quot;我是一个文本内容&quot;</span>,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)),</span><br><span class="line">        body:<span class="keyword">const</span> HomeWidget(),</span><br><span class="line">      ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Center(</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&quot;我是一个文本&quot;</span>,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          fontSize: <span class="number">40.0</span>,</span><br><span class="line"><span class="comment">// color: Colors.yellow,</span></span><br><span class="line">          color: Color.fromRGBO(<span class="number">244</span>, <span class="number">233</span>, <span class="number">121</span>, <span class="number">0.5</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-用MaterialApp和Scaffold两个组件装饰App"><a href="#6-用MaterialApp和Scaffold两个组件装饰App" class="headerlink" title="6. 用MaterialApp和Scaffold两个组件装饰App"></a>6. 用MaterialApp和Scaffold两个组件装饰App</h1><h2 id="6-1-MaterialApp"><a href="#6-1-MaterialApp" class="headerlink" title="6.1 MaterialApp"></a>6.1 MaterialApp</h2><p>MaterialApp是一个方便的Widget，它封装了应用程序实现Material Design所需要的一些Widget。一般作为顶层widget使用。</p><p><strong>常用的属性：</strong></p><ul><li>home（主页）</li><li>title（标题）</li><li>color（颜色）</li><li>theme（主题）</li><li>routes（路由）</li></ul><h2 id="6-2-Scaffold"><a href="#6-2-Scaffold" class="headerlink" title="6.2 Scaffold"></a>6.2 Scaffold</h2><p>Scaffold是Material Design布局结构的基本实现。此类提供了用于显示drawer、snackbar和底部sheet的API。</p><p><strong>Scaffold</strong> <strong>有下面几个主要属性：</strong></p><p>appBar - 显示在界面顶部的一个 AppBar。</p><p>body - 当前界面所显示的主要内容 Widget。</p><p>drawer - 抽屉菜单控件。</p><h1 id="7-Container容器组件"><a href="#7-Container容器组件" class="headerlink" title="7. Container容器组件"></a>7. Container容器组件</h1><table><thead><tr><th><strong>名称</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><strong>alignment</strong></td><td><code>topCenter</code>：顶部居中对齐    <code>topLeft</code>：顶部左对齐    <code>topRight</code>：顶部右对齐    <code>center</code>：水平垂直居中对齐<code>centerLeft</code>：垂直居中水平居左对齐    <code>centerRight</code>：垂直居中水平居右对齐    <code>bottomCenter</code>底部居中对齐<code>bottomLeft</code>：底部居左对齐    <code>bottomRight</code>：底部居右对齐</td></tr><tr><td><strong>decoration</strong></td><td><code>decoration</code>: BoxDecoration( color: Colors.blue, border: Border.all( color:Colors.red, width: 2.0), borderRadius:BorderRadius.circular((8)),&#x2F;&#x2F; 圆角 ，boxShadow: [ BoxShadow( color: Colors.blue, offset: Offset(2.0, 2.0),blurRadius: 10.0, ) ], ) &#x2F;&#x2F;LinearGradient 背景线性渐变 RadialGradient径向渐变gradient: LinearGradient( colors: [Colors.red, Colors.orange], ),</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/cplusplus/singleton/"/>
      <url>/cplusplus/singleton/</url>
      
        <content type="html"><![CDATA[<p style="color:red;">    在一个项目中，全局范围内，某个类的实例有且仅有一个，通过这个唯一实例向其他模块提供数据的全局访问，这种模式就叫单例模式。单例模式的典型应用就是任务队列。</p><p>如果使用单例模式，首先要保证这个类的实例有且仅有一个。</p><ul><li><code>构造函数</code>：创建一个新的对象</li><li><code>拷贝构造函数</code>：根据已有对象拷贝出一个新的对象</li><li><code>拷贝赋值操作符重载函数</code>：两个对象之间的赋值</li></ul><p>为了把一个类可以实例化多个对象的路堵死，可以做如下处理：</p><ol><li><p>构造函数私有化，在类内部只调用一次，这个是可控的。</p><ul><li><p style="color:red;">    由于使用者在类外部不能使用构造函数，所以在类内部创建的这个唯一的对象必须是静态的，这样就可以通过类名来访问了，为了不破坏类的封装，我们都会把这个静态对象的访问权限设置为私有的。</p></li><li><p style="color:red;">    在类中只有它的静态成员函数才能访问其静态成员变量，所以可以给这个单例类提供一个静态函数用于得到这个静态的单例对象。</p></li></ul></li><li><p>拷贝构造函数私有化或者禁用（<code>使用 = delete</code>）</p></li><li><p>拷贝赋值操作符重载函数私有化或者禁用（<code>从单例的语义上讲这个函数已经毫无意义，所以在类中不再提供这样一个函数，故将它也一并处理一下。</code>）</p></li></ol><p>因此，定义一个单例模式的类的示例代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个单例模式的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> Singleton* m_obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在实现一个单例模式的类的时候，有两种处理模式：</p><ul><li><code>饿汉模式</code></li><li><code>懒汉模式</code></li></ul><h2 id="1-饿汉模式"><a href="#1-饿汉模式" class="headerlink" title="1. 饿汉模式"></a>1. 饿汉模式</h2><p>饿汉模式就是在类加载的时候立刻进行实例化，这样就得到了一个唯一的可用对象。关于这个饿汉模式的类的定义如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饿汉模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_taskQ;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> TaskQueue* m_taskQ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 静态成员初始化放到类外部处理</span></span><br><span class="line">TaskQueue* TaskQueue::m_taskQ = <span class="keyword">new</span> TaskQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TaskQueue* obj = TaskQueue::<span class="built_in">getInstance</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第17行，定义这个单例类的时候，就把这个静态的单例对象创建出来了。当使用者通过getInstance()获取这个单例对象的时候，它已经被准备好了。</p><div class="note green icon-padding flat">    <i class="note-icon fas fa-bullhorn"></i>    <p>        <font color="red">注意事项：类的静态成员变量在使用之前必须在类的外部进行初始化才能使用。</font>    </p></div><h2 id="2-懒汉模式"><a href="#2-懒汉模式" class="headerlink" title="2. 懒汉模式"></a>2. 懒汉模式</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kanzi编写OpenGL</title>
      <link href="/kanzi/openGL/"/>
      <url>/kanzi/openGL/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建材质类型"><a href="#1-创建材质类型" class="headerlink" title="1.创建材质类型"></a>1.创建材质类型</h2><p><img src="/kanzi/openGL/Snipaste_2024-05-07_13-44-51.png" alt="Snipaste_2024-05-07_13-44-51"></p><p><img src="/kanzi/openGL/Snipaste_2024-05-07_13-49-44.png" alt="Snipaste_2024-05-07_13-49-44">创建后会生成对应的材质，材质类型，OpenGL代码。</p><h2 id="2-修改OpenGL代码"><a href="#2-修改OpenGL代码" class="headerlink" title="2.修改OpenGL代码"></a>2.修改OpenGL代码</h2><ul><li>原始的顶点着色器代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">attribute vec3 kzPosition;</span><br><span class="line">uniform highp mat4 kzProjectionCameraWorldMatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    precision mediump <span class="type">float</span>;</span><br><span class="line">    gl_Position = kzProjectionCameraWorldMatrix * <span class="built_in">vec4</span>(kzPosition.xyz, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>attribute</code> 和 <code>uniform</code>的区别</li></ul><p>在 OpenGL 中，<code>attribute</code> 和 <code>uniform</code> 是两种不同类型的变量，用于在顶点着色器和片段着色器之间传递数据。它们的主要区别在于它们的作用和使用方式：</p><ol><li><strong>attribute</strong>：<ul><li><code>attribute</code> 变量用于在顶点着色器中传递顶点数据，比如顶点位置、颜色或纹理坐标等。</li><li><code>attribute</code> 变量在每个顶点上都有不同的值，因此它们通常用于描述顶点特性。</li><li>顶点着色器中的 <code>attribute</code> 变量必须声明为 <code>attribute</code> 类型，并且需要使用顶点数据缓冲对象 (VBO) 来传递数据。</li></ul></li><li><strong>uniform</strong>：<ul><li><code>uniform</code> 变量用于在顶点着色器和片段着色器之间传递全局数据，例如变换矩阵、光照属性或纹理对象等。</li><li><code>uniform</code> 变量在整个绘制调用期间都保持不变，因此它们通常用于描述全局状态或共享数据。</li><li>顶点着色器和片段着色器中的 <code>uniform</code> 变量必须声明为 <code>uniform</code> 类型，并且可以在绘制调用之前使用 OpenGL API 函数设置它们的值。</li></ul></li></ol><p>总的来说，<code>attribute</code> 用于描述每个顶点的局部特性，而 <code>uniform</code> 用于描述全局的状态或共享数据。</p><ul><li><p>在代码中引用变量后，在材质类型的属性窗口中就会显示在代码内部的引用的变量，点击<code>Sync with Uniform</code>按钮生成相应的属性，若不存在则创建。</p><p><img src="/kanzi/openGL/Snipaste_2024-05-07_14-11-38.png" alt="Snipaste_2024-05-07_14-11-38"></p></li></ul><p><img src="/kanzi/openGL/Snipaste_2024-05-07_14-29-16.png" alt="Snipaste_2024-05-07_14-29-16"></p><ul><li>OpenGL使用的是笛卡尔右手坐标系，如下图所示。</li></ul><p><img src="/kanzi/openGL/Snipaste_2024-05-07_15-36-29.png" alt="Snipaste_2024-05-07_15-36-29"></p><ul><li><p>顶点着色器代码</p><p style="color:red;">    纹理坐标的取值范围为0-1</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">precision mediump <span class="type">float</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点的纹理坐标</span></span><br><span class="line">attribute vec2 kzTextureCoordinate0;</span><br><span class="line"><span class="comment">// 顶点的位置坐标</span></span><br><span class="line">attribute vec3 kzPosition;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uniform mediump <span class="type">float</span> Width;</span><br><span class="line">uniform mediump <span class="type">float</span> Height;</span><br><span class="line"><span class="comment">// 投影相机世界矩阵</span></span><br><span class="line">uniform highp mat4 kzProjectionCameraWorldMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合成图片的大小</span></span><br><span class="line">uniform vec2 TTImageSize;</span><br><span class="line"><span class="comment">// 每个TT灯图片在合成图片中的偏移量</span></span><br><span class="line">uniform vec2 OffsetInTTImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递给片段着色器的纹理坐标</span></span><br><span class="line">varying vec2 vTexCoord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// X轴向右为正</span></span><br><span class="line">    vTexCoord.x = kzTextureCoordinate<span class="number">0.</span>x * (Width / TTImageSize.x) + (OffsetInTTImage.x / TTImageSize.x * Width);</span><br><span class="line">    <span class="comment">// Y轴向上为正</span></span><br><span class="line">    vTexCoord.y = kzTextureCoordinate<span class="number">0.</span>y * (Height / TTImageSize.y) + (((TTImageSize.y - OffsetInTTImage.y * Height) - Height) / TTImageSize.y );</span><br><span class="line"></span><br><span class="line">    gl_Position = kzProjectionCameraWorldMatrix * <span class="built_in">vec4</span>(kzPosition.xyz, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>片元着色器代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">precision mediump <span class="type">float</span>;</span><br><span class="line"></span><br><span class="line">uniform sampler2D Texture;</span><br><span class="line"><span class="comment">// 存储主要颜色</span></span><br><span class="line">uniform vec4 PrimaryColor;</span><br><span class="line"><span class="comment">// 存储次要颜色</span></span><br><span class="line">uniform vec4 SecondaryColor;</span><br><span class="line"><span class="comment">// 是否使用次要颜色</span></span><br><span class="line">uniform <span class="type">bool</span> UseSecondaryColor;</span><br><span class="line"></span><br><span class="line">varying vec2 vTexCoord;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 从纹理 Texture 中使用纹理坐标 vTexCoord 采样出颜色，并将结果存储在 colorIn 变量中</span></span><br><span class="line">    vec4 colorIn = <span class="built_in">texture2D</span>(Texture, vTexCoord);</span><br><span class="line">    gl_FragColor = colorIn * <span class="built_in">mix</span>(PrimaryColor, SecondaryColor, <span class="built_in">float</span>(UseSecondaryColor));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kanzi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kanzi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装安知鱼博客</title>
      <link href="/other/blog-install/"/>
      <url>/other/blog-install/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载Node-js"><a href="#1-下载Node-js" class="headerlink" title="1. 下载Node.js"></a>1. 下载Node.js</h3><p><a href="https://nodejs.org/zh-cn/download/prebuilt-installer">Node.js — 下载 Node.js® (nodejs.org)</a></p><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br></pre></td></tr></table></figure><h3 id="3-安装-hexo-theme-anzhiyu-主题"><a href="#3-安装-hexo-theme-anzhiyu-主题" class="headerlink" title="3. 安装 hexo-theme-anzhiyu 主题"></a>3. 安装 hexo-theme-anzhiyu 主题</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-theme-anzhiyu</span></span><br></pre></td></tr></table></figure><h3 id="4-安装pug以及stylus的渲染器"><a href="#4-安装pug以及stylus的渲染器" class="headerlink" title="4. 安装pug以及stylus的渲染器"></a>4. 安装<code>pug</code>以及<code>stylus</code>的渲染器</h3><p>​这两个渲染器是<code>Butterfly</code>生成基础页面所需的依赖包</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-pug</span> <span class="string">hexo-renderer-stylus</span></span><br></pre></td></tr></table></figure><h3 id="5-安知鱼主题官方文档"><a href="#5-安知鱼主题官方文档" class="headerlink" title="5. 安知鱼主题官方文档"></a>5. 安知鱼主题官方文档</h3><p><a href="https://docs.anheyu.com/">https://docs.anheyu.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的常用配置</title>
      <link href="/other/hexo-config/"/>
      <url>/other/hexo-config/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置Typora图片"><a href="#1-配置Typora图片" class="headerlink" title="1. 配置Typora图片"></a>1. 配置Typora图片</h1><h2 id="1-1-设置Typora的图片路径"><a href="#1-1-设置Typora的图片路径" class="headerlink" title="1.1 设置Typora的图片路径"></a>1.1 设置Typora的图片路径</h2><p><img src="/other/hexo-config/Snipaste_2024-05-16_16-46-02.png" alt="Snipaste_2024-05-16_16-46-02"></p><h2 id="1-2-安装hexo-renderer-marked-包"><a href="#1-2-安装hexo-renderer-marked-包" class="headerlink" title="1.2 安装hexo-renderer-marked 包"></a>1.2 安装hexo-renderer-marked 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装命令</span></span><br><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure><h2 id="1-3-然后修改-config-yml文件"><a href="#1-3-然后修改-config-yml文件" class="headerlink" title="1.3 然后修改_config.yml文件"></a>1.3 然后修改_config.yml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Typora图片路径</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">    <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="1-4-最后修改插件-hexo-renderer-marked-的代码"><a href="#1-4-最后修改插件-hexo-renderer-marked-的代码" class="headerlink" title="1.4 最后修改插件 hexo-renderer-marked 的代码"></a>1.4 最后修改插件 hexo-renderer-marked 的代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(href.<span class="title function_">indexOf</span>(<span class="string">&#x27;/&#x27;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">      href = href.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/other/hexo-config/Snipaste_2024-05-16_16-55-20.png" alt="Snipaste_2024-05-16_16-55-20"></p><h2 id="1-5-为将来换电脑时省去上述步骤"><a href="#1-5-为将来换电脑时省去上述步骤" class="headerlink" title="1.5 为将来换电脑时省去上述步骤"></a>1.5 为将来换电脑时省去上述步骤</h2><h3 id="1-5-1-将修改后的hexo-renderer-marked包推到github上"><a href="#1-5-1-将修改后的hexo-renderer-marked包推到github上" class="headerlink" title="1.5.1 将修改后的hexo-renderer-marked包推到github上"></a>1.5.1 将修改后的hexo-renderer-marked包推到github上</h3><p><img src="/other/hexo-config/image-20240617125645430.png" alt="image-20240617125645430"></p><h3 id="1-5-2-修改package-json文件中的hexo-renderer-marked依赖路径"><a href="#1-5-2-修改package-json文件中的hexo-renderer-marked依赖路径" class="headerlink" title="1.5.2 修改package.json文件中的hexo-renderer-marked依赖路径"></a>1.5.2 修改package.json文件中的hexo-renderer-marked依赖路径</h3><p>更改为：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git+https://github.com/yongwang12138/hexo-renderer-marked.git</span><br></pre></td></tr></table></figure><p><img src="/other/hexo-config/image-20240617125809748.png" alt="image-20240617125809748"></p><h1 id="2-取消自动生成的目录序号"><a href="#2-取消自动生成的目录序号" class="headerlink" title="2. 取消自动生成的目录序号"></a>2. 取消自动生成的目录序号</h1><p>在_config.butterfly.yml文件中修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># toc (目录)</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span> <span class="comment"># 是否显示章节数</span></span><br></pre></td></tr></table></figure><p><img src="/other/hexo-config/image-20240522095654742.png" alt="image-20240522095654742"></p><h1 id="3-图片不要采用懒加载"><a href="#3-图片不要采用懒加载" class="headerlink" title="3. 图片不要采用懒加载"></a>3. 图片不要采用懒加载</h1><p>采用懒加载会出现点击目录跳转时跳不过去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lazyload (图片懒加载)</span></span><br><span class="line"><span class="comment"># https://github.com/verlok/vanilla-lazyload</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">placeholder:</span></span><br><span class="line">  <span class="attr">blur:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt配置Android环境</title>
      <link href="/qt/qt-android/"/>
      <url>/qt/qt-android/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装下载-安装JDK"><a href="#1-安装下载-安装JDK" class="headerlink" title="1. 安装下载&amp;安装JDK"></a>1. 安装下载&amp;安装JDK</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https://www.oracle.com/java/technologies/downloads/</span></span><br><span class="line"></span><br><span class="line"><span class="string">https://www.oracle.com/java/technologies/downloads/#java8-windows</span></span><br></pre></td></tr></table></figure><h2 id="2-Command-line-Tools-latest-版本过高"><a href="#2-Command-line-Tools-latest-版本过高" class="headerlink" title="2.Command-line Tools (latest) 版本过高"></a>2.Command-line Tools (latest) 版本过高</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https://dl.google.com/android/repository/commandlinetools-win-9123335_latest.zip</span></span><br></pre></td></tr></table></figure><h2 id="3-修改sdk-definitions-json文件"><a href="#3-修改sdk-definitions-json文件" class="headerlink" title="3.修改sdk_definitions.json文件"></a>3.修改sdk_definitions.json文件</h2><p>需要将QtCreator的sdk_definitions.json文件修改一下</p><p>“cmdline-tools;latest” 修改为 “cmdline-tools;6.0”。好像7.0也行。</p><p><img src="/qt/qt-android/image-20240517164208294.png" alt="image-20240517164208294"></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git部署教程</title>
      <link href="/other/git-deploy/"/>
      <url>/other/git-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看和设置当前的git用户名和邮箱"><a href="#1-查看和设置当前的git用户名和邮箱" class="headerlink" title="1. 查看和设置当前的git用户名和邮箱"></a>1. 查看和设置当前的git用户名和邮箱</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line">git config user.name <span class="string">&quot;unclewang12138&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;unclewang12138@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><h1 id="2-为不同平台创建不同的密钥"><a href="#2-为不同平台创建不同的密钥" class="headerlink" title="2. 为不同平台创建不同的密钥"></a>2. 为不同平台创建不同的密钥</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/gitee_id_rsa -C <span class="string">&quot;13327418643@163.com&quot;</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/github_id_rsa -C <span class="string">&quot;unclewang12138@gmail.com&quot;</span></span><br><span class="line">ssh-keygen -t ed25519 -f ~/.ssh/gitee_id_ed25519 -C <span class="string">&quot;13327418643@163.com&quot;</span></span><br><span class="line">ssh-keygen -t ed25519 -f ~/.ssh/github_id_ed25519 -C <span class="string">&quot;unclewang12138@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定仓库地址</span></span><br><span class="line">git remote add origin <span class="string">&quot;git@github.com:yongwang12138/yongwang12138.github.io.git&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">推荐ED25519</span> <span class="string">加密算法</span></span><br><span class="line"><span class="string">ED25519相比RSA有以下几点优势：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">更高的安全性：ED25519比RSA更安全，因为它使用更长的密钥（256位）和更好的密码学属性。RSA加密算法的安全性基于大质数的难以分解性质，但是随着计算机的发展，RSA的安全性可能会受到威胁。而ED25519则使用的是椭圆曲线密码学，具有更好的安全性。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">更快的密钥生成速度：ED25519密钥的生成速度比RSA更快，这意味着你可以更快地创建和使用SSH密钥。</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">更少的存储空间：ED25519密钥比RSA更短，占用更少的存储空间。</span></span><br></pre></td></tr></table></figure><h1 id="2-通过config配置文件，来使用不同的密钥连接不同的代码托管平台"><a href="#2-通过config配置文件，来使用不同的密钥连接不同的代码托管平台" class="headerlink" title="2. 通过config配置文件，来使用不同的密钥连接不同的代码托管平台"></a>2. 通过config配置文件，来使用不同的密钥连接不同的代码托管平台</h1><p><img src="/other/git-deploy/image-20250212171034631.png" alt="image-20250212171034631"></p><p><img src="/other/git-deploy/image-20250212171038238.png" alt="image-20250212171038238"></p><div class="tabs" id="config文件配置"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="config文件配置-1">Gitee</button><button type="button" class="tab " data-href="config文件配置-2">GitHub</button><button type="button" class="tab " data-href="config文件配置-3">虚拟机</button></ul><div class="tab-contents"><div class="tab-item-content active" id="config文件配置-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="string">User</span> <span class="string">git</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="string">~/.ssh/gitee_id_ed25519</span></span><br><span class="line"><span class="string">PubkeyAcceptedKeyTypes</span> <span class="string">ssh-ed25519</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="config文件配置-2"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">User</span> <span class="string">git</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="string">~/.ssh/github_id_ed25519</span></span><br><span class="line"><span class="string">PubkeyAcceptedKeyTypes</span> <span class="string">ssh-ed25519</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="config文件配置-3"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="number">192.168</span><span class="number">.244</span><span class="number">.132</span></span><br><span class="line"><span class="string">HostName</span> <span class="number">192.168</span><span class="number">.244</span><span class="number">.132</span></span><br><span class="line"><span class="string">User</span> <span class="string">wyw</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
